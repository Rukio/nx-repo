# -*- coding: utf-8 -*-
from __future__ import annotations

import os
import re

import click

# CONSTANTS
FILENAME_SUFFIXES = ("pb2_grpc.py", "_pb2.py")
GENERATED_FILE_COMMENT = f"# NOTE: This file is generated by py/tools/scripts/scripts/{os.path.basename(__file__)}"
# Statement meaning: IF this line starts with `from `  but does not have google or proto in front of it, match
PROTO_IMPORT_STATEMENT_RE = re.compile(r"^from (?!google|proto)")


@click.command()
@click.argument("dirname", type=click.Path(exists=True, file_okay=False, dir_okay=True))
def refactor_protos(dirname: str):
    """
    - walk through directory + subdirectories
    - if directory does not start with '__', add __init__.py
    - if file matches FILNAME_SUFFIXES refactor imports
    NOTE: This function is idempotent


    Parameters
    ----------
    dirname
        the root dir containing python protos. For services thats
        'services/py/lib/proto/proto'
    """
    for (dirpath, _, filenames) in os.walk(dirname):
        # don't put __init__ in __pycache__ dirs
        cur_dir = os.path.basename(os.path.normpath(dirpath))
        if not cur_dir.startswith("__"):
            ensure_init_py(dirpath)

        filepaths = [os.path.join(dirpath, filename) for filename in filenames if filename.endswith(FILENAME_SUFFIXES)]
        for filepath in filepaths:
            # run import fix for generated file
            refactor_proto_imports(filepath)


def ensure_init_py(dirpath: str):
    """
    create __init__.py if it doesn't exist.
    DOES NOT OVERWRITE IF ALREADY EXISTS

    Parameters
    ----------
    dirpath
        path to directory that requires the __init__.py

    """
    filepath = os.path.join(dirpath, "__init__.py")
    try:
        with open(filepath, "x") as f:
            f.write(GENERATED_FILE_COMMENT)
    except FileExistsError:
        # skip if already exists
        pass


def refactor_proto_imports(filepath: str):
    """
    Takes a filepath, and refactor relative imports.

    Iterates line by line until a match is found for the
    PROTO_IMPORT_STATEMENT_RE, which line it will replace

    Parameters
    ----------
    filepath
        path to the file whose imports will be refactored

    Returns
    -------
    None - updates in place
    """
    with open(filepath, "r+") as fp:
        data = []
        for line in fp:
            if PROTO_IMPORT_STATEMENT_RE.match(line):
                line = line.replace("from ", "from proto.")
            data.append(line)
        fp.seek(0)
        fp.write("".join(data))
        fp.truncate()


if __name__ == "__main__":
    refactor_protos()
