name: Build On Scene Model Service

run-name: ${{ github.head_ref || github.ref_name }} (${{ inputs.ref || github.sha }})

on:
  workflow_dispatch:
    inputs:
      ref:
        description: The sha to build, otherwise builds HEAD of branch
        type: string
        required: false
  push:
    branches:
      - trunk

jobs:
  build-on-scene-model-server-container:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Parse .tool-versions
        uses: wistia/parse-tool-versions@v1.0
        with:
          uppercase: 'true'
          postfix: '_tool_versions'
          filename: '.tool-versions'

      - name: Setup
        id: setup
        run: |
          sha=$(git log -1 --format='%H')
          echo "SHA=$sha" >> $GITHUB_OUTPUT
          echo "GRPC_REPO_VERSION=$(cat Makefile | grep '^GRPC_REPO_VERSION :=' | awk '{ print $3 }')" >> $GITHUB_OUTPUT
          echo "PY_PROTOBUF_VERSION=$(cat Makefile | grep '^PY_PROTOBUF_VERSION :=' | awk '{ print $3 }')" >> $GITHUB_OUTPUT
          echo "BUF_VERSION=$(cat Makefile | grep '^BUF_VERSION :=' | awk '{ print $3 }')" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Container
        uses: ./.github/actions/build_and_push_docker
        env:
          GRPC_PROXY_PORT: 10000
        with:
          image_name: on-scene-model-service
          dockerfile: docker/python.Dockerfile
          docker_port: 10000 50051
          docker_registry_url: ${{ secrets.DH_DOCKER_REGISTRY_URL }}
          docker_registry_username: ${{ secrets.DH_DOCKER_REGISTRY_PUSH_USERNAME }}
          docker_registry_password: ${{ secrets.DH_DOCKER_REGISTRY_PASSWORD }}
          extra_build_args: |
            GIT_SHA=${{ steps.setup.outputs.SHA }}
            GRPC_REPO_VERSION=${{ steps.setup.outputs.GRPC_REPO_VERSION }}
            PY_PROTOBUF_VERSION=${{ steps.setup.outputs.PY_PROTOBUF_VERSION }}
            BUF_VERSION=${{ steps.setup.outputs.BUF_VERSION }}
            PYTHON_VERS=${{ env.PYTHON_TOOL_VERSIONS }}
