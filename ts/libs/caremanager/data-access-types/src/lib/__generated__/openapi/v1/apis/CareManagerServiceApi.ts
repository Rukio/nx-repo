/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CanScheduleVisitRequest,
  CanScheduleVisitResponse,
  CancelVisitRequest,
  CareManagerServiceCreateEpisodeNoteRequest,
  CareManagerServiceCreateEpisodeTasksRequest,
  CareManagerServiceCreateVisitNoteRequest,
  CareManagerServiceCreateVisitSummaryRequest,
  CareManagerServiceRejectServiceRequestRequest,
  CareManagerServiceScheduleServiceRequestRequest,
  CareManagerServiceUpdateCallVisitRequest,
  CareManagerServiceUpdateEHRAppointmentRequest,
  CareManagerServiceUpdateEpisodeRequest,
  CareManagerServiceUpdateExternalCareProviderRequest,
  CareManagerServiceUpdateInsuranceRequest,
  CareManagerServiceUpdateMedicalDecisionMakerRequest,
  CareManagerServiceUpdateNoteRequest,
  CareManagerServiceUpdatePatientRequest,
  CareManagerServiceUpdatePharmacyRequest,
  CareManagerServiceUpdateServiceRequestRequest,
  CareManagerServiceUpdateTaskRequest,
  CareManagerServiceUpdateTaskTemplateRequest,
  CareManagerServiceUpdateVisitEpisodeRequest,
  CareManagerServiceUpdateVisitNoteRequest,
  CareManagerServiceUpdateVisitRequest,
  CareManagerServiceUpdateVisitStatusRequest,
  CareManagerServiceUpdateVisitSummaryRequest,
  CreateCallVisitRequest,
  CreateCallVisitResponse,
  CreateEHRAppointmentResponse,
  CreateEpisodeNoteResponse,
  CreateEpisodeRequest,
  CreateEpisodeResponse,
  CreateEpisodeTasksResponse,
  CreateExternalCareProviderRequest,
  CreateExternalCareProviderResponse,
  CreateInsuranceRequest,
  CreateInsuranceResponse,
  CreateMedicalDecisionMakerRequest,
  CreateMedicalDecisionMakerResponse,
  CreatePatientRequest,
  CreatePatientResponse,
  CreatePharmacyRequest,
  CreatePharmacyResponse,
  CreateServiceRequestNoteResponse,
  CreateTaskTemplateRequest,
  CreateTaskTemplateResponse,
  CreateVisitFromStationCRRequest,
  CreateVisitFromStationCRResponse,
  CreateVisitNoteResponse,
  CreateVisitSummaryResponse,
  DeleteExternalCareProviderResponse,
  DeleteInsuranceResponse,
  DuplicateCareRequestInServiceRequestResponse,
  DuplicateEpisodeLatestVisitResponse,
  GetActivePatientsResponse,
  GetAddressesByIDResponse,
  GetConfigResponse,
  GetEpisodeResponse,
  GetEpisodeVisitsResponse,
  GetEpisodesResponse,
  GetPatientResponse,
  GetPatientsResponse,
  GetProviderTypesResponse,
  GetServiceRequestNotesResponse,
  GetServiceRequestResponse,
  GetServiceRequestStatusResponse,
  GetServiceRequestsResponse,
  GetTaskTemplateResponse,
  GetTaskTemplatesResponse,
  GetUsersByIDResponse,
  GetVirtualAPPVisitsQueueResponse,
  GetVisitAvailabilityRequest,
  GetVisitAvailabilityResponse,
  GetVisitResponse,
  GetVisitTypesResponse,
  ListCarsByIDsResponse,
  PinNoteResponse,
  RejectServiceRequestResponse,
  ScheduleServiceRequestResponse,
  ScheduleVisitRequest,
  ScheduleVisitResponse,
  SearchUsersRequest,
  SearchUsersResponse,
  Status,
  UnassignOwnerFromServiceRequestResponse,
  UnpinNoteResponse,
  UpdateCallVisitResponse,
  UpdateEHRAppointmentResponse,
  UpdateEpisodeResponse,
  UpdateExternalCareProviderResponse,
  UpdateInsuranceResponse,
  UpdateMedicalDecisionMakerResponse,
  UpdateNoteResponse,
  UpdatePatientResponse,
  UpdatePharmacyResponse,
  UpdateServiceRequestResponse,
  UpdateTaskResponse,
  UpdateTaskTemplateResponse,
  UpdateVisitEpisodeResponse,
  UpdateVisitNoteResponse,
  UpdateVisitResponse,
  UpdateVisitStatusResponse,
  UpdateVisitSummaryResponse,
} from '../models';
import {
    CanScheduleVisitRequestFromJSON,
    CanScheduleVisitRequestToJSON,
    CanScheduleVisitResponseFromJSON,
    CanScheduleVisitResponseToJSON,
    CancelVisitRequestFromJSON,
    CancelVisitRequestToJSON,
    CareManagerServiceCreateEpisodeNoteRequestFromJSON,
    CareManagerServiceCreateEpisodeNoteRequestToJSON,
    CareManagerServiceCreateEpisodeTasksRequestFromJSON,
    CareManagerServiceCreateEpisodeTasksRequestToJSON,
    CareManagerServiceCreateVisitNoteRequestFromJSON,
    CareManagerServiceCreateVisitNoteRequestToJSON,
    CareManagerServiceCreateVisitSummaryRequestFromJSON,
    CareManagerServiceCreateVisitSummaryRequestToJSON,
    CareManagerServiceRejectServiceRequestRequestFromJSON,
    CareManagerServiceRejectServiceRequestRequestToJSON,
    CareManagerServiceScheduleServiceRequestRequestFromJSON,
    CareManagerServiceScheduleServiceRequestRequestToJSON,
    CareManagerServiceUpdateCallVisitRequestFromJSON,
    CareManagerServiceUpdateCallVisitRequestToJSON,
    CareManagerServiceUpdateEHRAppointmentRequestFromJSON,
    CareManagerServiceUpdateEHRAppointmentRequestToJSON,
    CareManagerServiceUpdateEpisodeRequestFromJSON,
    CareManagerServiceUpdateEpisodeRequestToJSON,
    CareManagerServiceUpdateExternalCareProviderRequestFromJSON,
    CareManagerServiceUpdateExternalCareProviderRequestToJSON,
    CareManagerServiceUpdateInsuranceRequestFromJSON,
    CareManagerServiceUpdateInsuranceRequestToJSON,
    CareManagerServiceUpdateMedicalDecisionMakerRequestFromJSON,
    CareManagerServiceUpdateMedicalDecisionMakerRequestToJSON,
    CareManagerServiceUpdateNoteRequestFromJSON,
    CareManagerServiceUpdateNoteRequestToJSON,
    CareManagerServiceUpdatePatientRequestFromJSON,
    CareManagerServiceUpdatePatientRequestToJSON,
    CareManagerServiceUpdatePharmacyRequestFromJSON,
    CareManagerServiceUpdatePharmacyRequestToJSON,
    CareManagerServiceUpdateServiceRequestRequestFromJSON,
    CareManagerServiceUpdateServiceRequestRequestToJSON,
    CareManagerServiceUpdateTaskRequestFromJSON,
    CareManagerServiceUpdateTaskRequestToJSON,
    CareManagerServiceUpdateTaskTemplateRequestFromJSON,
    CareManagerServiceUpdateTaskTemplateRequestToJSON,
    CareManagerServiceUpdateVisitEpisodeRequestFromJSON,
    CareManagerServiceUpdateVisitEpisodeRequestToJSON,
    CareManagerServiceUpdateVisitNoteRequestFromJSON,
    CareManagerServiceUpdateVisitNoteRequestToJSON,
    CareManagerServiceUpdateVisitRequestFromJSON,
    CareManagerServiceUpdateVisitRequestToJSON,
    CareManagerServiceUpdateVisitStatusRequestFromJSON,
    CareManagerServiceUpdateVisitStatusRequestToJSON,
    CareManagerServiceUpdateVisitSummaryRequestFromJSON,
    CareManagerServiceUpdateVisitSummaryRequestToJSON,
    CreateCallVisitRequestFromJSON,
    CreateCallVisitRequestToJSON,
    CreateCallVisitResponseFromJSON,
    CreateCallVisitResponseToJSON,
    CreateEHRAppointmentResponseFromJSON,
    CreateEHRAppointmentResponseToJSON,
    CreateEpisodeNoteResponseFromJSON,
    CreateEpisodeNoteResponseToJSON,
    CreateEpisodeRequestFromJSON,
    CreateEpisodeRequestToJSON,
    CreateEpisodeResponseFromJSON,
    CreateEpisodeResponseToJSON,
    CreateEpisodeTasksResponseFromJSON,
    CreateEpisodeTasksResponseToJSON,
    CreateExternalCareProviderRequestFromJSON,
    CreateExternalCareProviderRequestToJSON,
    CreateExternalCareProviderResponseFromJSON,
    CreateExternalCareProviderResponseToJSON,
    CreateInsuranceRequestFromJSON,
    CreateInsuranceRequestToJSON,
    CreateInsuranceResponseFromJSON,
    CreateInsuranceResponseToJSON,
    CreateMedicalDecisionMakerRequestFromJSON,
    CreateMedicalDecisionMakerRequestToJSON,
    CreateMedicalDecisionMakerResponseFromJSON,
    CreateMedicalDecisionMakerResponseToJSON,
    CreatePatientRequestFromJSON,
    CreatePatientRequestToJSON,
    CreatePatientResponseFromJSON,
    CreatePatientResponseToJSON,
    CreatePharmacyRequestFromJSON,
    CreatePharmacyRequestToJSON,
    CreatePharmacyResponseFromJSON,
    CreatePharmacyResponseToJSON,
    CreateServiceRequestNoteResponseFromJSON,
    CreateServiceRequestNoteResponseToJSON,
    CreateTaskTemplateRequestFromJSON,
    CreateTaskTemplateRequestToJSON,
    CreateTaskTemplateResponseFromJSON,
    CreateTaskTemplateResponseToJSON,
    CreateVisitFromStationCRRequestFromJSON,
    CreateVisitFromStationCRRequestToJSON,
    CreateVisitFromStationCRResponseFromJSON,
    CreateVisitFromStationCRResponseToJSON,
    CreateVisitNoteResponseFromJSON,
    CreateVisitNoteResponseToJSON,
    CreateVisitSummaryResponseFromJSON,
    CreateVisitSummaryResponseToJSON,
    DeleteExternalCareProviderResponseFromJSON,
    DeleteExternalCareProviderResponseToJSON,
    DeleteInsuranceResponseFromJSON,
    DeleteInsuranceResponseToJSON,
    DuplicateCareRequestInServiceRequestResponseFromJSON,
    DuplicateCareRequestInServiceRequestResponseToJSON,
    DuplicateEpisodeLatestVisitResponseFromJSON,
    DuplicateEpisodeLatestVisitResponseToJSON,
    GetActivePatientsResponseFromJSON,
    GetActivePatientsResponseToJSON,
    GetAddressesByIDResponseFromJSON,
    GetAddressesByIDResponseToJSON,
    GetConfigResponseFromJSON,
    GetConfigResponseToJSON,
    GetEpisodeResponseFromJSON,
    GetEpisodeResponseToJSON,
    GetEpisodeVisitsResponseFromJSON,
    GetEpisodeVisitsResponseToJSON,
    GetEpisodesResponseFromJSON,
    GetEpisodesResponseToJSON,
    GetPatientResponseFromJSON,
    GetPatientResponseToJSON,
    GetPatientsResponseFromJSON,
    GetPatientsResponseToJSON,
    GetProviderTypesResponseFromJSON,
    GetProviderTypesResponseToJSON,
    GetServiceRequestNotesResponseFromJSON,
    GetServiceRequestNotesResponseToJSON,
    GetServiceRequestResponseFromJSON,
    GetServiceRequestResponseToJSON,
    GetServiceRequestStatusResponseFromJSON,
    GetServiceRequestStatusResponseToJSON,
    GetServiceRequestsResponseFromJSON,
    GetServiceRequestsResponseToJSON,
    GetTaskTemplateResponseFromJSON,
    GetTaskTemplateResponseToJSON,
    GetTaskTemplatesResponseFromJSON,
    GetTaskTemplatesResponseToJSON,
    GetUsersByIDResponseFromJSON,
    GetUsersByIDResponseToJSON,
    GetVirtualAPPVisitsQueueResponseFromJSON,
    GetVirtualAPPVisitsQueueResponseToJSON,
    GetVisitAvailabilityRequestFromJSON,
    GetVisitAvailabilityRequestToJSON,
    GetVisitAvailabilityResponseFromJSON,
    GetVisitAvailabilityResponseToJSON,
    GetVisitResponseFromJSON,
    GetVisitResponseToJSON,
    GetVisitTypesResponseFromJSON,
    GetVisitTypesResponseToJSON,
    ListCarsByIDsResponseFromJSON,
    ListCarsByIDsResponseToJSON,
    PinNoteResponseFromJSON,
    PinNoteResponseToJSON,
    RejectServiceRequestResponseFromJSON,
    RejectServiceRequestResponseToJSON,
    ScheduleServiceRequestResponseFromJSON,
    ScheduleServiceRequestResponseToJSON,
    ScheduleVisitRequestFromJSON,
    ScheduleVisitRequestToJSON,
    ScheduleVisitResponseFromJSON,
    ScheduleVisitResponseToJSON,
    SearchUsersRequestFromJSON,
    SearchUsersRequestToJSON,
    SearchUsersResponseFromJSON,
    SearchUsersResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    UnassignOwnerFromServiceRequestResponseFromJSON,
    UnassignOwnerFromServiceRequestResponseToJSON,
    UnpinNoteResponseFromJSON,
    UnpinNoteResponseToJSON,
    UpdateCallVisitResponseFromJSON,
    UpdateCallVisitResponseToJSON,
    UpdateEHRAppointmentResponseFromJSON,
    UpdateEHRAppointmentResponseToJSON,
    UpdateEpisodeResponseFromJSON,
    UpdateEpisodeResponseToJSON,
    UpdateExternalCareProviderResponseFromJSON,
    UpdateExternalCareProviderResponseToJSON,
    UpdateInsuranceResponseFromJSON,
    UpdateInsuranceResponseToJSON,
    UpdateMedicalDecisionMakerResponseFromJSON,
    UpdateMedicalDecisionMakerResponseToJSON,
    UpdateNoteResponseFromJSON,
    UpdateNoteResponseToJSON,
    UpdatePatientResponseFromJSON,
    UpdatePatientResponseToJSON,
    UpdatePharmacyResponseFromJSON,
    UpdatePharmacyResponseToJSON,
    UpdateServiceRequestResponseFromJSON,
    UpdateServiceRequestResponseToJSON,
    UpdateTaskResponseFromJSON,
    UpdateTaskResponseToJSON,
    UpdateTaskTemplateResponseFromJSON,
    UpdateTaskTemplateResponseToJSON,
    UpdateVisitEpisodeResponseFromJSON,
    UpdateVisitEpisodeResponseToJSON,
    UpdateVisitNoteResponseFromJSON,
    UpdateVisitNoteResponseToJSON,
    UpdateVisitResponseFromJSON,
    UpdateVisitResponseToJSON,
    UpdateVisitStatusResponseFromJSON,
    UpdateVisitStatusResponseToJSON,
    UpdateVisitSummaryResponseFromJSON,
    UpdateVisitSummaryResponseToJSON,
} from '../models';

export interface CareManagerServiceAssignVirtualAPPRequest {
    visitId: string;
    body: object;
}

export interface CareManagerServiceCanScheduleVisitRequest {
    body: CanScheduleVisitRequest;
}

export interface CareManagerServiceCancelVisitRequest {
    body: CancelVisitRequest;
}

export interface CareManagerServiceCreateCallVisitRequest {
    body: CreateCallVisitRequest;
}

export interface CareManagerServiceCreateEHRAppointmentRequest {
    visitId: string;
    body: CareManagerServiceUpdateEHRAppointmentRequest;
}

export interface CareManagerServiceCreateEpisodeRequest {
    body: CreateEpisodeRequest;
}

export interface CareManagerServiceCreateEpisodeNoteOperationRequest {
    episodeId: string;
    body: CareManagerServiceCreateEpisodeNoteRequest;
}

export interface CareManagerServiceCreateEpisodeTasksOperationRequest {
    episodeId: string;
    body: CareManagerServiceCreateEpisodeTasksRequest;
}

export interface CareManagerServiceCreateExternalCareProviderRequest {
    body: CreateExternalCareProviderRequest;
}

export interface CareManagerServiceCreateInsuranceRequest {
    body: CreateInsuranceRequest;
}

export interface CareManagerServiceCreateMedicalDecisionMakerRequest {
    body: CreateMedicalDecisionMakerRequest;
}

export interface CareManagerServiceCreatePatientRequest {
    body: CreatePatientRequest;
}

export interface CareManagerServiceCreatePharmacyRequest {
    body: CreatePharmacyRequest;
}

export interface CareManagerServiceCreateServiceRequestNoteRequest {
    serviceRequestId: string;
    details: string;
}

export interface CareManagerServiceCreateTaskTemplateRequest {
    body: CreateTaskTemplateRequest;
}

export interface CareManagerServiceCreateVisitFromStationCRRequest {
    body: CreateVisitFromStationCRRequest;
}

export interface CareManagerServiceCreateVisitNoteOperationRequest {
    visitId: string;
    body: CareManagerServiceCreateVisitNoteRequest;
}

export interface CareManagerServiceCreateVisitSummaryOperationRequest {
    visitId: string;
    body: CareManagerServiceCreateVisitSummaryRequest;
}

export interface CareManagerServiceDeleteExternalCareProviderRequest {
    externalCareProviderId: string;
}

export interface CareManagerServiceDeleteInsuranceRequest {
    insuranceId: string;
}

export interface CareManagerServiceDeleteNoteRequest {
    noteId: string;
}

export interface CareManagerServiceDeleteTaskRequest {
    taskId: string;
}

export interface CareManagerServiceDeleteTaskTemplateRequest {
    templateId: string;
}

export interface CareManagerServiceDeleteVisitNoteRequest {
    visitId: string;
    noteId: string;
}

export interface CareManagerServiceDuplicateCareRequestInServiceRequestRequest {
    serviceRequestId: string;
    body: object;
}

export interface CareManagerServiceDuplicateEpisodeLatestVisitRequest {
    episodeId: string;
    body: object;
}

export interface CareManagerServiceGetActivePatientsRequest {
    athenaIds?: Array<string>;
    page?: string;
    pageSize?: string;
}

export interface CareManagerServiceGetAddressesByIDRequest {
    addressIds: Array<string>;
}

export interface CareManagerServiceGetEpisodeRequest {
    episodeId: string;
}

export interface CareManagerServiceGetEpisodeVisitsRequest {
    episodeId: string;
}

export interface CareManagerServiceGetEpisodesRequest {
    incompleteTask?: boolean;
    marketId?: Array<string>;
    patientName?: string;
    page?: string;
    pageSize?: string;
    serviceLineId?: Array<string>;
    carePhaseId?: Array<string>;
}

export interface CareManagerServiceGetPatientRequest {
    patientId: string;
}

export interface CareManagerServiceGetPatientsRequest {
    name: string;
    page?: string;
    pageSize?: string;
}

export interface CareManagerServiceGetServiceRequestRequest {
    serviceRequestId: string;
}

export interface CareManagerServiceGetServiceRequestNotesRequest {
    serviceRequestId: string;
}

export interface CareManagerServiceGetServiceRequestsRequest {
    statusIds?: Array<string>;
    searchTerm?: string;
    page?: string;
    pageSize?: string;
    marketIds?: Array<string>;
}

export interface CareManagerServiceGetTaskTemplateRequest {
    taskTemplateId: string;
}

export interface CareManagerServiceGetTaskTemplatesRequest {
    page?: string;
    pageSize?: string;
    name?: string;
    serviceLineId?: Array<string>;
    carePhaseId?: Array<string>;
    sortBy?: string;
    sortDirection?: string;
}

export interface CareManagerServiceGetUsersByIDRequest {
    userIds: Array<string>;
}

export interface CareManagerServiceGetVirtualAPPVisitsQueueRequest {
    shiftTeamId: string;
    marketIds: Array<string>;
    userId: string;
}

export interface CareManagerServiceGetVisitRequest {
    visitId: string;
}

export interface CareManagerServiceGetVisitAvailabilityRequest {
    body: GetVisitAvailabilityRequest;
}

export interface CareManagerServiceListCarsByIDsRequest {
    carIds: Array<string>;
}

export interface CareManagerServicePinNoteRequest {
    noteId: string;
}

export interface CareManagerServiceRejectServiceRequestOperationRequest {
    serviceRequestId: string;
    body: CareManagerServiceRejectServiceRequestRequest;
}

export interface CareManagerServiceScheduleServiceRequestOperationRequest {
    serviceRequestId: string;
    body: CareManagerServiceScheduleServiceRequestRequest;
}

export interface CareManagerServiceScheduleVisitRequest {
    body: ScheduleVisitRequest;
}

export interface CareManagerServiceSearchUsersRequest {
    body: SearchUsersRequest;
}

export interface CareManagerServiceUnassignOwnerFromServiceRequestRequest {
    serviceRequestId: string;
    body: object;
}

export interface CareManagerServiceUnassignVirtualAPPRequest {
    visitId: string;
    body: object;
}

export interface CareManagerServiceUnpinNoteRequest {
    noteId: string;
}

export interface CareManagerServiceUpdateCallVisitOperationRequest {
    visitId: string;
    body: CareManagerServiceUpdateCallVisitRequest;
}

export interface CareManagerServiceUpdateEHRAppointmentOperationRequest {
    visitId: string;
    body: CareManagerServiceUpdateEHRAppointmentRequest;
}

export interface CareManagerServiceUpdateEpisodeOperationRequest {
    episodeId: string;
    body: CareManagerServiceUpdateEpisodeRequest;
}

export interface CareManagerServiceUpdateExternalCareProviderOperationRequest {
    externalCareProviderId: string;
    body: CareManagerServiceUpdateExternalCareProviderRequest;
}

export interface CareManagerServiceUpdateInsuranceOperationRequest {
    insuranceId: string;
    body: CareManagerServiceUpdateInsuranceRequest;
}

export interface CareManagerServiceUpdateMedicalDecisionMakerOperationRequest {
    medicalDecisionMakerId: string;
    body: CareManagerServiceUpdateMedicalDecisionMakerRequest;
}

export interface CareManagerServiceUpdateNoteOperationRequest {
    noteId: string;
    body: CareManagerServiceUpdateNoteRequest;
}

export interface CareManagerServiceUpdatePatientOperationRequest {
    patientId: string;
    body: CareManagerServiceUpdatePatientRequest;
}

export interface CareManagerServiceUpdatePharmacyOperationRequest {
    pharmacyId: string;
    body: CareManagerServiceUpdatePharmacyRequest;
}

export interface CareManagerServiceUpdateServiceRequestOperationRequest {
    serviceRequestId: string;
    body: CareManagerServiceUpdateServiceRequestRequest;
}

export interface CareManagerServiceUpdateTaskOperationRequest {
    taskId: string;
    body: CareManagerServiceUpdateTaskRequest;
}

export interface CareManagerServiceUpdateTaskTemplateOperationRequest {
    templateId: string;
    body: CareManagerServiceUpdateTaskTemplateRequest;
}

export interface CareManagerServiceUpdateVisitOperationRequest {
    visitId: string;
    body: CareManagerServiceUpdateVisitRequest;
}

export interface CareManagerServiceUpdateVisitEpisodeOperationRequest {
    visitId: string;
    body: CareManagerServiceUpdateVisitEpisodeRequest;
}

export interface CareManagerServiceUpdateVisitNoteOperationRequest {
    visitId: string;
    noteId: string;
    body: CareManagerServiceUpdateVisitNoteRequest;
}

export interface CareManagerServiceUpdateVisitStatusOperationRequest {
    visitId: string;
    body: CareManagerServiceUpdateVisitStatusRequest;
}

export interface CareManagerServiceUpdateVisitSummaryOperationRequest {
    visitId: string;
    body: CareManagerServiceUpdateVisitSummaryRequest;
}

/**
 * 
 */
export class CareManagerServiceApi extends runtime.BaseAPI {

    /**
     * AssignVirtualAPP assigns the calling Virtual APP to the specified Visit.
     */
    async careManagerServiceAssignVirtualAPPRaw(requestParameters: CareManagerServiceAssignVirtualAPPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceAssignVirtualAPP.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceAssignVirtualAPP.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/virtual-app/assign`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * AssignVirtualAPP assigns the calling Virtual APP to the specified Visit.
     */
    async careManagerServiceAssignVirtualAPP(requestParameters: CareManagerServiceAssignVirtualAPPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceAssignVirtualAPPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CanScheduleVisit returns whether we can schedule a visit or not, given the interval of time specified by the user.
     */
    async careManagerServiceCanScheduleVisitRaw(requestParameters: CareManagerServiceCanScheduleVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CanScheduleVisitResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCanScheduleVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/can-schedule-visit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CanScheduleVisitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CanScheduleVisitResponseFromJSON(jsonValue));
    }

    /**
     * CanScheduleVisit returns whether we can schedule a visit or not, given the interval of time specified by the user.
     */
    async careManagerServiceCanScheduleVisit(requestParameters: CareManagerServiceCanScheduleVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CanScheduleVisitResponse> {
        const response = await this.careManagerServiceCanScheduleVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CancelVisit cancels the visit given a Care Request ID.
     */
    async careManagerServiceCancelVisitRaw(requestParameters: CareManagerServiceCancelVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCancelVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/cancel-visit`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CancelVisitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * CancelVisit cancels the visit given a Care Request ID.
     */
    async careManagerServiceCancelVisit(requestParameters: CareManagerServiceCancelVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceCancelVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateCallVisit creates a call Visit with Summary details.
     */
    async careManagerServiceCreateCallVisitRaw(requestParameters: CareManagerServiceCreateCallVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCallVisitResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateCallVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/call`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCallVisitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCallVisitResponseFromJSON(jsonValue));
    }

    /**
     * CreateCallVisit creates a call Visit with Summary details.
     */
    async careManagerServiceCreateCallVisit(requestParameters: CareManagerServiceCreateCallVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCallVisitResponse> {
        const response = await this.careManagerServiceCreateCallVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateEHRAppointment creates appointment for specified Visit.
     */
    async careManagerServiceCreateEHRAppointmentRaw(requestParameters: CareManagerServiceCreateEHRAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEHRAppointmentResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceCreateEHRAppointment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateEHRAppointment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/ehr-appointment`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateEHRAppointmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEHRAppointmentResponseFromJSON(jsonValue));
    }

    /**
     * CreateEHRAppointment creates appointment for specified Visit.
     */
    async careManagerServiceCreateEHRAppointment(requestParameters: CareManagerServiceCreateEHRAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEHRAppointmentResponse> {
        const response = await this.careManagerServiceCreateEHRAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateEpisode creates new Episodes.
     */
    async careManagerServiceCreateEpisodeRaw(requestParameters: CareManagerServiceCreateEpisodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEpisodeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateEpisode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/episodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEpisodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEpisodeResponseFromJSON(jsonValue));
    }

    /**
     * CreateEpisode creates new Episodes.
     */
    async careManagerServiceCreateEpisode(requestParameters: CareManagerServiceCreateEpisodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEpisodeResponse> {
        const response = await this.careManagerServiceCreateEpisodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateEpisodeNote creates a new Note assigned to an episode.
     */
    async careManagerServiceCreateEpisodeNoteRaw(requestParameters: CareManagerServiceCreateEpisodeNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEpisodeNoteResponse>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling careManagerServiceCreateEpisodeNote.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateEpisodeNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/episodes/{episode_id}/notes`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceCreateEpisodeNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEpisodeNoteResponseFromJSON(jsonValue));
    }

    /**
     * CreateEpisodeNote creates a new Note assigned to an episode.
     */
    async careManagerServiceCreateEpisodeNote(requestParameters: CareManagerServiceCreateEpisodeNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEpisodeNoteResponse> {
        const response = await this.careManagerServiceCreateEpisodeNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateEpisodeTasks creates new Episode Tasks.
     */
    async careManagerServiceCreateEpisodeTasksRaw(requestParameters: CareManagerServiceCreateEpisodeTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEpisodeTasksResponse>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling careManagerServiceCreateEpisodeTasks.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateEpisodeTasks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/episodes/{episode_id}/tasks`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceCreateEpisodeTasksRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEpisodeTasksResponseFromJSON(jsonValue));
    }

    /**
     * CreateEpisodeTasks creates new Episode Tasks.
     */
    async careManagerServiceCreateEpisodeTasks(requestParameters: CareManagerServiceCreateEpisodeTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEpisodeTasksResponse> {
        const response = await this.careManagerServiceCreateEpisodeTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateExternalCareProvider creates an ExternalCareProvider for an existing Patient.
     */
    async careManagerServiceCreateExternalCareProviderRaw(requestParameters: CareManagerServiceCreateExternalCareProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateExternalCareProviderResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateExternalCareProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/external-care-providers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExternalCareProviderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateExternalCareProviderResponseFromJSON(jsonValue));
    }

    /**
     * CreateExternalCareProvider creates an ExternalCareProvider for an existing Patient.
     */
    async careManagerServiceCreateExternalCareProvider(requestParameters: CareManagerServiceCreateExternalCareProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateExternalCareProviderResponse> {
        const response = await this.careManagerServiceCreateExternalCareProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateInsurance creates an Insurance for an existing Patient.
     */
    async careManagerServiceCreateInsuranceRaw(requestParameters: CareManagerServiceCreateInsuranceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateInsuranceResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateInsurance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/insurances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInsuranceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInsuranceResponseFromJSON(jsonValue));
    }

    /**
     * CreateInsurance creates an Insurance for an existing Patient.
     */
    async careManagerServiceCreateInsurance(requestParameters: CareManagerServiceCreateInsuranceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateInsuranceResponse> {
        const response = await this.careManagerServiceCreateInsuranceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateMedicalDecisionMaker creates a MedicalDecisionMaker for an existing Patient.
     */
    async careManagerServiceCreateMedicalDecisionMakerRaw(requestParameters: CareManagerServiceCreateMedicalDecisionMakerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMedicalDecisionMakerResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateMedicalDecisionMaker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/medical-decision-makers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMedicalDecisionMakerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMedicalDecisionMakerResponseFromJSON(jsonValue));
    }

    /**
     * CreateMedicalDecisionMaker creates a MedicalDecisionMaker for an existing Patient.
     */
    async careManagerServiceCreateMedicalDecisionMaker(requestParameters: CareManagerServiceCreateMedicalDecisionMakerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMedicalDecisionMakerResponse> {
        const response = await this.careManagerServiceCreateMedicalDecisionMakerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreatePatient creates a new Patient.
     */
    async careManagerServiceCreatePatientRaw(requestParameters: CareManagerServiceCreatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePatientResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreatePatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePatientRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePatientResponseFromJSON(jsonValue));
    }

    /**
     * CreatePatient creates a new Patient.
     */
    async careManagerServiceCreatePatient(requestParameters: CareManagerServiceCreatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePatientResponse> {
        const response = await this.careManagerServiceCreatePatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreatePharmacy creates a Pharmacy for an existing Patient.
     */
    async careManagerServiceCreatePharmacyRaw(requestParameters: CareManagerServiceCreatePharmacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePharmacyResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreatePharmacy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/pharmacies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePharmacyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePharmacyResponseFromJSON(jsonValue));
    }

    /**
     * CreatePharmacy creates a Pharmacy for an existing Patient.
     */
    async careManagerServiceCreatePharmacy(requestParameters: CareManagerServiceCreatePharmacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePharmacyResponse> {
        const response = await this.careManagerServiceCreatePharmacyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateServiceRequestNote creates a Note for a ServiceRequest.
     */
    async careManagerServiceCreateServiceRequestNoteRaw(requestParameters: CareManagerServiceCreateServiceRequestNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateServiceRequestNoteResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceCreateServiceRequestNote.');
        }

        if (requestParameters.details === null || requestParameters.details === undefined) {
            throw new runtime.RequiredError('details','Required parameter requestParameters.details was null or undefined when calling careManagerServiceCreateServiceRequestNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.details !== undefined) {
            queryParameters['details'] = requestParameters.details;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}/notes`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateServiceRequestNoteResponseFromJSON(jsonValue));
    }

    /**
     * CreateServiceRequestNote creates a Note for a ServiceRequest.
     */
    async careManagerServiceCreateServiceRequestNote(requestParameters: CareManagerServiceCreateServiceRequestNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateServiceRequestNoteResponse> {
        const response = await this.careManagerServiceCreateServiceRequestNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateTaskTemplate creates a new TaskTemplate.
     */
    async careManagerServiceCreateTaskTemplateRaw(requestParameters: CareManagerServiceCreateTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTaskTemplateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateTaskTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/task_templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskTemplateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTaskTemplateResponseFromJSON(jsonValue));
    }

    /**
     * CreateTaskTemplate creates a new TaskTemplate.
     */
    async careManagerServiceCreateTaskTemplate(requestParameters: CareManagerServiceCreateTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTaskTemplateResponse> {
        const response = await this.careManagerServiceCreateTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateVisitFromStationCR always creates a visit. It will also create an episode and patient if none are found.
     */
    async careManagerServiceCreateVisitFromStationCRRaw(requestParameters: CareManagerServiceCreateVisitFromStationCRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVisitFromStationCRResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateVisitFromStationCR.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/from-station-care-request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVisitFromStationCRRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVisitFromStationCRResponseFromJSON(jsonValue));
    }

    /**
     * CreateVisitFromStationCR always creates a visit. It will also create an episode and patient if none are found.
     */
    async careManagerServiceCreateVisitFromStationCR(requestParameters: CareManagerServiceCreateVisitFromStationCRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVisitFromStationCRResponse> {
        const response = await this.careManagerServiceCreateVisitFromStationCRRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateVisitNote creates a Note in Station for the specified Visit.
     */
    async careManagerServiceCreateVisitNoteRaw(requestParameters: CareManagerServiceCreateVisitNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVisitNoteResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceCreateVisitNote.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateVisitNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/notes`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceCreateVisitNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVisitNoteResponseFromJSON(jsonValue));
    }

    /**
     * CreateVisitNote creates a Note in Station for the specified Visit.
     */
    async careManagerServiceCreateVisitNote(requestParameters: CareManagerServiceCreateVisitNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVisitNoteResponse> {
        const response = await this.careManagerServiceCreateVisitNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CreateVisitSummary creates a new VisitSummary for the given Visit ID. The operation will error if the Visit already has a VisitSummary.
     */
    async careManagerServiceCreateVisitSummaryRaw(requestParameters: CareManagerServiceCreateVisitSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateVisitSummaryResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceCreateVisitSummary.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceCreateVisitSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/summary`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceCreateVisitSummaryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVisitSummaryResponseFromJSON(jsonValue));
    }

    /**
     * CreateVisitSummary creates a new VisitSummary for the given Visit ID. The operation will error if the Visit already has a VisitSummary.
     */
    async careManagerServiceCreateVisitSummary(requestParameters: CareManagerServiceCreateVisitSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateVisitSummaryResponse> {
        const response = await this.careManagerServiceCreateVisitSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteExternalCareProvider deletes an existing ExternalCareProvider.
     */
    async careManagerServiceDeleteExternalCareProviderRaw(requestParameters: CareManagerServiceDeleteExternalCareProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteExternalCareProviderResponse>> {
        if (requestParameters.externalCareProviderId === null || requestParameters.externalCareProviderId === undefined) {
            throw new runtime.RequiredError('externalCareProviderId','Required parameter requestParameters.externalCareProviderId was null or undefined when calling careManagerServiceDeleteExternalCareProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/external-care-providers/{external_care_provider_id}`.replace(`{${"external_care_provider_id"}}`, encodeURIComponent(String(requestParameters.externalCareProviderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteExternalCareProviderResponseFromJSON(jsonValue));
    }

    /**
     * DeleteExternalCareProvider deletes an existing ExternalCareProvider.
     */
    async careManagerServiceDeleteExternalCareProvider(requestParameters: CareManagerServiceDeleteExternalCareProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteExternalCareProviderResponse> {
        const response = await this.careManagerServiceDeleteExternalCareProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteInsurance deletes an existing Insurance.
     */
    async careManagerServiceDeleteInsuranceRaw(requestParameters: CareManagerServiceDeleteInsuranceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteInsuranceResponse>> {
        if (requestParameters.insuranceId === null || requestParameters.insuranceId === undefined) {
            throw new runtime.RequiredError('insuranceId','Required parameter requestParameters.insuranceId was null or undefined when calling careManagerServiceDeleteInsurance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/insurances/{insurance_id}`.replace(`{${"insurance_id"}}`, encodeURIComponent(String(requestParameters.insuranceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteInsuranceResponseFromJSON(jsonValue));
    }

    /**
     * DeleteInsurance deletes an existing Insurance.
     */
    async careManagerServiceDeleteInsurance(requestParameters: CareManagerServiceDeleteInsuranceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteInsuranceResponse> {
        const response = await this.careManagerServiceDeleteInsuranceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteNote deletes an existing Note.
     */
    async careManagerServiceDeleteNoteRaw(requestParameters: CareManagerServiceDeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling careManagerServiceDeleteNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notes/{note_id}`.replace(`{${"note_id"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DeleteNote deletes an existing Note.
     */
    async careManagerServiceDeleteNote(requestParameters: CareManagerServiceDeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceDeleteNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteTask deletes an existing Task.
     */
    async careManagerServiceDeleteTaskRaw(requestParameters: CareManagerServiceDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling careManagerServiceDeleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DeleteTask deletes an existing Task.
     */
    async careManagerServiceDeleteTask(requestParameters: CareManagerServiceDeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceDeleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteTaskTemplate deletes an existing TaskTemplate.
     */
    async careManagerServiceDeleteTaskTemplateRaw(requestParameters: CareManagerServiceDeleteTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling careManagerServiceDeleteTaskTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/task_templates/{template_id}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DeleteTaskTemplate deletes an existing TaskTemplate.
     */
    async careManagerServiceDeleteTaskTemplate(requestParameters: CareManagerServiceDeleteTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceDeleteTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DeleteVisitNote deletes a Note by ID for the specified Visit.
     */
    async careManagerServiceDeleteVisitNoteRaw(requestParameters: CareManagerServiceDeleteVisitNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceDeleteVisitNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling careManagerServiceDeleteVisitNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/visits/{visit_id}/notes/{note_id}`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))).replace(`{${"note_id"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DeleteVisitNote deletes a Note by ID for the specified Visit.
     */
    async careManagerServiceDeleteVisitNote(requestParameters: CareManagerServiceDeleteVisitNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceDeleteVisitNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DuplicateCareRequestInServiceRequest duplicates the Care Request of a Service Request.
     */
    async careManagerServiceDuplicateCareRequestInServiceRequestRaw(requestParameters: CareManagerServiceDuplicateCareRequestInServiceRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateCareRequestInServiceRequestResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceDuplicateCareRequestInServiceRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceDuplicateCareRequestInServiceRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}/duplicate-care-request`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuplicateCareRequestInServiceRequestResponseFromJSON(jsonValue));
    }

    /**
     * DuplicateCareRequestInServiceRequest duplicates the Care Request of a Service Request.
     */
    async careManagerServiceDuplicateCareRequestInServiceRequest(requestParameters: CareManagerServiceDuplicateCareRequestInServiceRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateCareRequestInServiceRequestResponse> {
        const response = await this.careManagerServiceDuplicateCareRequestInServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DuplicateEpisodeLatestVisit duplicates the latest visit in the given Episode.
     */
    async careManagerServiceDuplicateEpisodeLatestVisitRaw(requestParameters: CareManagerServiceDuplicateEpisodeLatestVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateEpisodeLatestVisitResponse>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling careManagerServiceDuplicateEpisodeLatestVisit.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceDuplicateEpisodeLatestVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/episodes/{episode_id}/duplicate-latest-visit`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuplicateEpisodeLatestVisitResponseFromJSON(jsonValue));
    }

    /**
     * DuplicateEpisodeLatestVisit duplicates the latest visit in the given Episode.
     */
    async careManagerServiceDuplicateEpisodeLatestVisit(requestParameters: CareManagerServiceDuplicateEpisodeLatestVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateEpisodeLatestVisitResponse> {
        const response = await this.careManagerServiceDuplicateEpisodeLatestVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetActivePatients retrieves a list of Patients with at least one episode with an active phase.
     */
    async careManagerServiceGetActivePatientsRaw(requestParameters: CareManagerServiceGetActivePatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetActivePatientsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.athenaIds) {
            queryParameters['athena_ids'] = requestParameters.athenaIds;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patients/active`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetActivePatientsResponseFromJSON(jsonValue));
    }

    /**
     * GetActivePatients retrieves a list of Patients with at least one episode with an active phase.
     */
    async careManagerServiceGetActivePatients(requestParameters: CareManagerServiceGetActivePatientsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetActivePatientsResponse> {
        const response = await this.careManagerServiceGetActivePatientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetAddressesByID retrieves a list of Addresses by a list of IDs.
     */
    async careManagerServiceGetAddressesByIDRaw(requestParameters: CareManagerServiceGetAddressesByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressesByIDResponse>> {
        if (requestParameters.addressIds === null || requestParameters.addressIds === undefined) {
            throw new runtime.RequiredError('addressIds','Required parameter requestParameters.addressIds was null or undefined when calling careManagerServiceGetAddressesByID.');
        }

        const queryParameters: any = {};

        if (requestParameters.addressIds) {
            queryParameters['address_ids'] = requestParameters.addressIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/by-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressesByIDResponseFromJSON(jsonValue));
    }

    /**
     * GetAddressesByID retrieves a list of Addresses by a list of IDs.
     */
    async careManagerServiceGetAddressesByID(requestParameters: CareManagerServiceGetAddressesByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressesByIDResponse> {
        const response = await this.careManagerServiceGetAddressesByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetConfig provides user-enabled markets, service lines and care phases values for UI components in the Caremanager Frontend App.
     */
    async careManagerServiceGetConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetConfigResponseFromJSON(jsonValue));
    }

    /**
     * GetConfig provides user-enabled markets, service lines and care phases values for UI components in the Caremanager Frontend App.
     */
    async careManagerServiceGetConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConfigResponse> {
        const response = await this.careManagerServiceGetConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * GetEpisode retrieves an instance of Episode for the provided episode_id
     */
    async careManagerServiceGetEpisodeRaw(requestParameters: CareManagerServiceGetEpisodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeResponse>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling careManagerServiceGetEpisode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/episodes/{episode_id}`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeResponseFromJSON(jsonValue));
    }

    /**
     * GetEpisode retrieves an instance of Episode for the provided episode_id
     */
    async careManagerServiceGetEpisode(requestParameters: CareManagerServiceGetEpisodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeResponse> {
        const response = await this.careManagerServiceGetEpisodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetEpisodeVisits retrieves the list of Visits that belongs to the specified Episode.
     */
    async careManagerServiceGetEpisodeVisitsRaw(requestParameters: CareManagerServiceGetEpisodeVisitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeVisitsResponse>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling careManagerServiceGetEpisodeVisits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/episodes/{episode_id}/visits`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeVisitsResponseFromJSON(jsonValue));
    }

    /**
     * GetEpisodeVisits retrieves the list of Visits that belongs to the specified Episode.
     */
    async careManagerServiceGetEpisodeVisits(requestParameters: CareManagerServiceGetEpisodeVisitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeVisitsResponse> {
        const response = await this.careManagerServiceGetEpisodeVisitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetEpisodes retrieves a list of Episodes with pagination info.
     */
    async careManagerServiceGetEpisodesRaw(requestParameters: CareManagerServiceGetEpisodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.incompleteTask !== undefined) {
            queryParameters['incomplete_task'] = requestParameters.incompleteTask;
        }

        if (requestParameters.marketId) {
            queryParameters['market_id'] = requestParameters.marketId;
        }

        if (requestParameters.patientName !== undefined) {
            queryParameters['patient_name'] = requestParameters.patientName;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.serviceLineId) {
            queryParameters['service_line_id'] = requestParameters.serviceLineId;
        }

        if (requestParameters.carePhaseId) {
            queryParameters['care_phase_id'] = requestParameters.carePhaseId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/episodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodesResponseFromJSON(jsonValue));
    }

    /**
     * GetEpisodes retrieves a list of Episodes with pagination info.
     */
    async careManagerServiceGetEpisodes(requestParameters: CareManagerServiceGetEpisodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodesResponse> {
        const response = await this.careManagerServiceGetEpisodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetPatient retrieves an instance of a Patient for the provided patient_id
     */
    async careManagerServiceGetPatientRaw(requestParameters: CareManagerServiceGetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPatientResponse>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling careManagerServiceGetPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patients/{patient_id}`.replace(`{${"patient_id"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPatientResponseFromJSON(jsonValue));
    }

    /**
     * GetPatient retrieves an instance of a Patient for the provided patient_id
     */
    async careManagerServiceGetPatient(requestParameters: CareManagerServiceGetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPatientResponse> {
        const response = await this.careManagerServiceGetPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetPatients retrieves a list of Patients with pagination info.
     */
    async careManagerServiceGetPatientsRaw(requestParameters: CareManagerServiceGetPatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPatientsResponse>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling careManagerServiceGetPatients.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPatientsResponseFromJSON(jsonValue));
    }

    /**
     * GetPatients retrieves a list of Patients with pagination info.
     */
    async careManagerServiceGetPatients(requestParameters: CareManagerServiceGetPatientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPatientsResponse> {
        const response = await this.careManagerServiceGetPatientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetProviderTypes retrieves a list of ProviderTypes.
     */
    async careManagerServiceGetProviderTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProviderTypesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/provider-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProviderTypesResponseFromJSON(jsonValue));
    }

    /**
     * GetProviderTypes retrieves a list of ProviderTypes.
     */
    async careManagerServiceGetProviderTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProviderTypesResponse> {
        const response = await this.careManagerServiceGetProviderTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * GetServiceRequest retrieves a single ServiceRequest by id
     */
    async careManagerServiceGetServiceRequestRaw(requestParameters: CareManagerServiceGetServiceRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceRequestResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceGetServiceRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceRequestResponseFromJSON(jsonValue));
    }

    /**
     * GetServiceRequest retrieves a single ServiceRequest by id
     */
    async careManagerServiceGetServiceRequest(requestParameters: CareManagerServiceGetServiceRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceRequestResponse> {
        const response = await this.careManagerServiceGetServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetServiceRequestNotes retrieves the list of Note entities related to a ServiceRequest.
     */
    async careManagerServiceGetServiceRequestNotesRaw(requestParameters: CareManagerServiceGetServiceRequestNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceRequestNotesResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceGetServiceRequestNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}/notes`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceRequestNotesResponseFromJSON(jsonValue));
    }

    /**
     * GetServiceRequestNotes retrieves the list of Note entities related to a ServiceRequest.
     */
    async careManagerServiceGetServiceRequestNotes(requestParameters: CareManagerServiceGetServiceRequestNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceRequestNotesResponse> {
        const response = await this.careManagerServiceGetServiceRequestNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetServiceRequestStatus retrieves a list of ServiceRequestStatus.
     */
    async careManagerServiceGetServiceRequestStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceRequestStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service-request-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceRequestStatusResponseFromJSON(jsonValue));
    }

    /**
     * GetServiceRequestStatus retrieves a list of ServiceRequestStatus.
     */
    async careManagerServiceGetServiceRequestStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceRequestStatusResponse> {
        const response = await this.careManagerServiceGetServiceRequestStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * GetServiceRequests retrieves a list of ServiceRequestListElements
     */
    async careManagerServiceGetServiceRequestsRaw(requestParameters: CareManagerServiceGetServiceRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceRequestsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.statusIds) {
            queryParameters['status_ids'] = requestParameters.statusIds;
        }

        if (requestParameters.searchTerm !== undefined) {
            queryParameters['search_term'] = requestParameters.searchTerm;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.marketIds) {
            queryParameters['market_ids'] = requestParameters.marketIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/service-requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceRequestsResponseFromJSON(jsonValue));
    }

    /**
     * GetServiceRequests retrieves a list of ServiceRequestListElements
     */
    async careManagerServiceGetServiceRequests(requestParameters: CareManagerServiceGetServiceRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceRequestsResponse> {
        const response = await this.careManagerServiceGetServiceRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetTaskTemplate gets an existing Task Template given a task_template_id
     */
    async careManagerServiceGetTaskTemplateRaw(requestParameters: CareManagerServiceGetTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskTemplateResponse>> {
        if (requestParameters.taskTemplateId === null || requestParameters.taskTemplateId === undefined) {
            throw new runtime.RequiredError('taskTemplateId','Required parameter requestParameters.taskTemplateId was null or undefined when calling careManagerServiceGetTaskTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/task_templates/{task_template_id}`.replace(`{${"task_template_id"}}`, encodeURIComponent(String(requestParameters.taskTemplateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskTemplateResponseFromJSON(jsonValue));
    }

    /**
     * GetTaskTemplate gets an existing Task Template given a task_template_id
     */
    async careManagerServiceGetTaskTemplate(requestParameters: CareManagerServiceGetTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskTemplateResponse> {
        const response = await this.careManagerServiceGetTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetTaskTemplates retrieves a list of TaskTemplates with pagination info.
     */
    async careManagerServiceGetTaskTemplatesRaw(requestParameters: CareManagerServiceGetTaskTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskTemplatesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.serviceLineId) {
            queryParameters['service_line_id'] = requestParameters.serviceLineId;
        }

        if (requestParameters.carePhaseId) {
            queryParameters['care_phase_id'] = requestParameters.carePhaseId;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['sort_direction'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/task_templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskTemplatesResponseFromJSON(jsonValue));
    }

    /**
     * GetTaskTemplates retrieves a list of TaskTemplates with pagination info.
     */
    async careManagerServiceGetTaskTemplates(requestParameters: CareManagerServiceGetTaskTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskTemplatesResponse> {
        const response = await this.careManagerServiceGetTaskTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetUsersByID retrieves a list of users by a list of IDs.
     */
    async careManagerServiceGetUsersByIDRaw(requestParameters: CareManagerServiceGetUsersByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersByIDResponse>> {
        if (requestParameters.userIds === null || requestParameters.userIds === undefined) {
            throw new runtime.RequiredError('userIds','Required parameter requestParameters.userIds was null or undefined when calling careManagerServiceGetUsersByID.');
        }

        const queryParameters: any = {};

        if (requestParameters.userIds) {
            queryParameters['user_ids'] = requestParameters.userIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users/by-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersByIDResponseFromJSON(jsonValue));
    }

    /**
     * GetUsersByID retrieves a list of users by a list of IDs.
     */
    async careManagerServiceGetUsersByID(requestParameters: CareManagerServiceGetUsersByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersByIDResponse> {
        const response = await this.careManagerServiceGetUsersByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetVirtualAPPVisitsQueue retrieves all Visits for Virtual APP\'s Queue
     */
    async careManagerServiceGetVirtualAPPVisitsQueueRaw(requestParameters: CareManagerServiceGetVirtualAPPVisitsQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVirtualAPPVisitsQueueResponse>> {
        if (requestParameters.shiftTeamId === null || requestParameters.shiftTeamId === undefined) {
            throw new runtime.RequiredError('shiftTeamId','Required parameter requestParameters.shiftTeamId was null or undefined when calling careManagerServiceGetVirtualAPPVisitsQueue.');
        }

        if (requestParameters.marketIds === null || requestParameters.marketIds === undefined) {
            throw new runtime.RequiredError('marketIds','Required parameter requestParameters.marketIds was null or undefined when calling careManagerServiceGetVirtualAPPVisitsQueue.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling careManagerServiceGetVirtualAPPVisitsQueue.');
        }

        const queryParameters: any = {};

        if (requestParameters.shiftTeamId !== undefined) {
            queryParameters['shift_team_id'] = requestParameters.shiftTeamId;
        }

        if (requestParameters.marketIds) {
            queryParameters['market_ids'] = requestParameters.marketIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/visits/virtual-app-queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVirtualAPPVisitsQueueResponseFromJSON(jsonValue));
    }

    /**
     * GetVirtualAPPVisitsQueue retrieves all Visits for Virtual APP\'s Queue
     */
    async careManagerServiceGetVirtualAPPVisitsQueue(requestParameters: CareManagerServiceGetVirtualAPPVisitsQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVirtualAPPVisitsQueueResponse> {
        const response = await this.careManagerServiceGetVirtualAPPVisitsQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetVisit retrieves a visit with summary data in the payload using the id provided in the request.
     */
    async careManagerServiceGetVisitRaw(requestParameters: CareManagerServiceGetVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVisitResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceGetVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/visits/{visit_id}`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVisitResponseFromJSON(jsonValue));
    }

    /**
     * GetVisit retrieves a visit with summary data in the payload using the id provided in the request.
     */
    async careManagerServiceGetVisit(requestParameters: CareManagerServiceGetVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVisitResponse> {
        const response = await this.careManagerServiceGetVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetVisitAvailability returns a list of dates along with their corresponding availability based on the requested dates.
     */
    async careManagerServiceGetVisitAvailabilityRaw(requestParameters: CareManagerServiceGetVisitAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVisitAvailabilityResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceGetVisitAvailability.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visit-availability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetVisitAvailabilityRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVisitAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * GetVisitAvailability returns a list of dates along with their corresponding availability based on the requested dates.
     */
    async careManagerServiceGetVisitAvailability(requestParameters: CareManagerServiceGetVisitAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVisitAvailabilityResponse> {
        const response = await this.careManagerServiceGetVisitAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GetVisitTypes retrieves the list of all VisitTypes
     */
    async careManagerServiceGetVisitTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVisitTypesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/visit_types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVisitTypesResponseFromJSON(jsonValue));
    }

    /**
     * GetVisitTypes retrieves the list of all VisitTypes
     */
    async careManagerServiceGetVisitTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVisitTypesResponse> {
        const response = await this.careManagerServiceGetVisitTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * ListCarsByIDs retrieves Cars by IDs
     */
    async careManagerServiceListCarsByIDsRaw(requestParameters: CareManagerServiceListCarsByIDsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCarsByIDsResponse>> {
        if (requestParameters.carIds === null || requestParameters.carIds === undefined) {
            throw new runtime.RequiredError('carIds','Required parameter requestParameters.carIds was null or undefined when calling careManagerServiceListCarsByIDs.');
        }

        const queryParameters: any = {};

        if (requestParameters.carIds) {
            queryParameters['car_ids'] = requestParameters.carIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/cars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCarsByIDsResponseFromJSON(jsonValue));
    }

    /**
     * ListCarsByIDs retrieves Cars by IDs
     */
    async careManagerServiceListCarsByIDs(requestParameters: CareManagerServiceListCarsByIDsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCarsByIDsResponse> {
        const response = await this.careManagerServiceListCarsByIDsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PinNote sets the pinned state of a note to true.
     */
    async careManagerServicePinNoteRaw(requestParameters: CareManagerServicePinNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinNoteResponse>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling careManagerServicePinNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notes/{note_id}/pin`.replace(`{${"note_id"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinNoteResponseFromJSON(jsonValue));
    }

    /**
     * PinNote sets the pinned state of a note to true.
     */
    async careManagerServicePinNote(requestParameters: CareManagerServicePinNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinNoteResponse> {
        const response = await this.careManagerServicePinNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RejectServiceRequest sets rejected status to a ServiceRequest and adds a reason.
     */
    async careManagerServiceRejectServiceRequestRaw(requestParameters: CareManagerServiceRejectServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RejectServiceRequestResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceRejectServiceRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceRejectServiceRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}/reject`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceRejectServiceRequestRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RejectServiceRequestResponseFromJSON(jsonValue));
    }

    /**
     * RejectServiceRequest sets rejected status to a ServiceRequest and adds a reason.
     */
    async careManagerServiceRejectServiceRequest(requestParameters: CareManagerServiceRejectServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RejectServiceRequestResponse> {
        const response = await this.careManagerServiceRejectServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScheduleServiceRequest marks a Service Request as resolved and schedules the associated Care Request in Station.
     */
    async careManagerServiceScheduleServiceRequestRaw(requestParameters: CareManagerServiceScheduleServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleServiceRequestResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceScheduleServiceRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceScheduleServiceRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}/schedule`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceScheduleServiceRequestRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleServiceRequestResponseFromJSON(jsonValue));
    }

    /**
     * ScheduleServiceRequest marks a Service Request as resolved and schedules the associated Care Request in Station.
     */
    async careManagerServiceScheduleServiceRequest(requestParameters: CareManagerServiceScheduleServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleServiceRequestResponse> {
        const response = await this.careManagerServiceScheduleServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScheduleVisit is responsible for scheduling a visit based on the provided Care Request ID and the selected availability time window chosen by the patient
     */
    async careManagerServiceScheduleVisitRaw(requestParameters: CareManagerServiceScheduleVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleVisitResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceScheduleVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/schedule-visit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleVisitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleVisitResponseFromJSON(jsonValue));
    }

    /**
     * ScheduleVisit is responsible for scheduling a visit based on the provided Care Request ID and the selected availability time window chosen by the patient
     */
    async careManagerServiceScheduleVisit(requestParameters: CareManagerServiceScheduleVisitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleVisitResponse> {
        const response = await this.careManagerServiceScheduleVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SearchUsers returns a list of users that match with the given input.
     */
    async careManagerServiceSearchUsersRaw(requestParameters: CareManagerServiceSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchUsersResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceSearchUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/users/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchUsersRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchUsersResponseFromJSON(jsonValue));
    }

    /**
     * SearchUsers returns a list of users that match with the given input.
     */
    async careManagerServiceSearchUsers(requestParameters: CareManagerServiceSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchUsersResponse> {
        const response = await this.careManagerServiceSearchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UnassignOwnerFromServiceRequest unassigns a Owner from a ServiceRequest.
     */
    async careManagerServiceUnassignOwnerFromServiceRequestRaw(requestParameters: CareManagerServiceUnassignOwnerFromServiceRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnassignOwnerFromServiceRequestResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceUnassignOwnerFromServiceRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUnassignOwnerFromServiceRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}/unassign-owner`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnassignOwnerFromServiceRequestResponseFromJSON(jsonValue));
    }

    /**
     * UnassignOwnerFromServiceRequest unassigns a Owner from a ServiceRequest.
     */
    async careManagerServiceUnassignOwnerFromServiceRequest(requestParameters: CareManagerServiceUnassignOwnerFromServiceRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnassignOwnerFromServiceRequestResponse> {
        const response = await this.careManagerServiceUnassignOwnerFromServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AssignVirtualAPP unassigns the calling Virtual APP from the specified Visit.
     */
    async careManagerServiceUnassignVirtualAPPRaw(requestParameters: CareManagerServiceUnassignVirtualAPPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUnassignVirtualAPP.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUnassignVirtualAPP.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/virtual-app/unassign`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * AssignVirtualAPP unassigns the calling Virtual APP from the specified Visit.
     */
    async careManagerServiceUnassignVirtualAPP(requestParameters: CareManagerServiceUnassignVirtualAPPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.careManagerServiceUnassignVirtualAPPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UnpinNote sets the pinned state of a note to false.
     */
    async careManagerServiceUnpinNoteRaw(requestParameters: CareManagerServiceUnpinNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnpinNoteResponse>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling careManagerServiceUnpinNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notes/{note_id}/unpin`.replace(`{${"note_id"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnpinNoteResponseFromJSON(jsonValue));
    }

    /**
     * UnpinNote sets the pinned state of a note to false.
     */
    async careManagerServiceUnpinNote(requestParameters: CareManagerServiceUnpinNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnpinNoteResponse> {
        const response = await this.careManagerServiceUnpinNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateCallVisit updates a call Visit with Summary details.
     */
    async careManagerServiceUpdateCallVisitRaw(requestParameters: CareManagerServiceUpdateCallVisitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCallVisitResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateCallVisit.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateCallVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/call/{visit_id}`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateCallVisitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCallVisitResponseFromJSON(jsonValue));
    }

    /**
     * UpdateCallVisit updates a call Visit with Summary details.
     */
    async careManagerServiceUpdateCallVisit(requestParameters: CareManagerServiceUpdateCallVisitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCallVisitResponse> {
        const response = await this.careManagerServiceUpdateCallVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateEHRAppointment updates appointment of specified Visit.
     */
    async careManagerServiceUpdateEHRAppointmentRaw(requestParameters: CareManagerServiceUpdateEHRAppointmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEHRAppointmentResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateEHRAppointment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateEHRAppointment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/ehr-appointment`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateEHRAppointmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEHRAppointmentResponseFromJSON(jsonValue));
    }

    /**
     * UpdateEHRAppointment updates appointment of specified Visit.
     */
    async careManagerServiceUpdateEHRAppointment(requestParameters: CareManagerServiceUpdateEHRAppointmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEHRAppointmentResponse> {
        const response = await this.careManagerServiceUpdateEHRAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateEpisode updates an existing Episode.
     */
    async careManagerServiceUpdateEpisodeRaw(requestParameters: CareManagerServiceUpdateEpisodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEpisodeResponse>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling careManagerServiceUpdateEpisode.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateEpisode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/episodes/{episode_id}`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateEpisodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEpisodeResponseFromJSON(jsonValue));
    }

    /**
     * UpdateEpisode updates an existing Episode.
     */
    async careManagerServiceUpdateEpisode(requestParameters: CareManagerServiceUpdateEpisodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEpisodeResponse> {
        const response = await this.careManagerServiceUpdateEpisodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateExternalCareProvider updates an ExternalCareProvider.
     */
    async careManagerServiceUpdateExternalCareProviderRaw(requestParameters: CareManagerServiceUpdateExternalCareProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateExternalCareProviderResponse>> {
        if (requestParameters.externalCareProviderId === null || requestParameters.externalCareProviderId === undefined) {
            throw new runtime.RequiredError('externalCareProviderId','Required parameter requestParameters.externalCareProviderId was null or undefined when calling careManagerServiceUpdateExternalCareProvider.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateExternalCareProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/external-care-providers/{external_care_provider_id}`.replace(`{${"external_care_provider_id"}}`, encodeURIComponent(String(requestParameters.externalCareProviderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateExternalCareProviderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateExternalCareProviderResponseFromJSON(jsonValue));
    }

    /**
     * UpdateExternalCareProvider updates an ExternalCareProvider.
     */
    async careManagerServiceUpdateExternalCareProvider(requestParameters: CareManagerServiceUpdateExternalCareProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateExternalCareProviderResponse> {
        const response = await this.careManagerServiceUpdateExternalCareProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateInsurance updates an Insurance for an specific insurance id.
     */
    async careManagerServiceUpdateInsuranceRaw(requestParameters: CareManagerServiceUpdateInsuranceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateInsuranceResponse>> {
        if (requestParameters.insuranceId === null || requestParameters.insuranceId === undefined) {
            throw new runtime.RequiredError('insuranceId','Required parameter requestParameters.insuranceId was null or undefined when calling careManagerServiceUpdateInsurance.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateInsurance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/insurances/{insurance_id}`.replace(`{${"insurance_id"}}`, encodeURIComponent(String(requestParameters.insuranceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateInsuranceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateInsuranceResponseFromJSON(jsonValue));
    }

    /**
     * UpdateInsurance updates an Insurance for an specific insurance id.
     */
    async careManagerServiceUpdateInsurance(requestParameters: CareManagerServiceUpdateInsuranceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateInsuranceResponse> {
        const response = await this.careManagerServiceUpdateInsuranceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateMedicalDecisionMaker updates an existing MedicalDecisionMaker.
     */
    async careManagerServiceUpdateMedicalDecisionMakerRaw(requestParameters: CareManagerServiceUpdateMedicalDecisionMakerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMedicalDecisionMakerResponse>> {
        if (requestParameters.medicalDecisionMakerId === null || requestParameters.medicalDecisionMakerId === undefined) {
            throw new runtime.RequiredError('medicalDecisionMakerId','Required parameter requestParameters.medicalDecisionMakerId was null or undefined when calling careManagerServiceUpdateMedicalDecisionMaker.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateMedicalDecisionMaker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/medical-decision-makers/{medical_decision_maker_id}`.replace(`{${"medical_decision_maker_id"}}`, encodeURIComponent(String(requestParameters.medicalDecisionMakerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateMedicalDecisionMakerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMedicalDecisionMakerResponseFromJSON(jsonValue));
    }

    /**
     * UpdateMedicalDecisionMaker updates an existing MedicalDecisionMaker.
     */
    async careManagerServiceUpdateMedicalDecisionMaker(requestParameters: CareManagerServiceUpdateMedicalDecisionMakerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMedicalDecisionMakerResponse> {
        const response = await this.careManagerServiceUpdateMedicalDecisionMakerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateNote updates an existing Note.
     */
    async careManagerServiceUpdateNoteRaw(requestParameters: CareManagerServiceUpdateNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNoteResponse>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling careManagerServiceUpdateNote.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/notes/{note_id}`.replace(`{${"note_id"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNoteResponseFromJSON(jsonValue));
    }

    /**
     * UpdateNote updates an existing Note.
     */
    async careManagerServiceUpdateNote(requestParameters: CareManagerServiceUpdateNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNoteResponse> {
        const response = await this.careManagerServiceUpdateNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdatePatient updates an existing Patient.
     */
    async careManagerServiceUpdatePatientRaw(requestParameters: CareManagerServiceUpdatePatientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePatientResponse>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling careManagerServiceUpdatePatient.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdatePatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/patients/{patient_id}`.replace(`{${"patient_id"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdatePatientRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePatientResponseFromJSON(jsonValue));
    }

    /**
     * UpdatePatient updates an existing Patient.
     */
    async careManagerServiceUpdatePatient(requestParameters: CareManagerServiceUpdatePatientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePatientResponse> {
        const response = await this.careManagerServiceUpdatePatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdatePharmacy an existing Pharmacy.
     */
    async careManagerServiceUpdatePharmacyRaw(requestParameters: CareManagerServiceUpdatePharmacyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePharmacyResponse>> {
        if (requestParameters.pharmacyId === null || requestParameters.pharmacyId === undefined) {
            throw new runtime.RequiredError('pharmacyId','Required parameter requestParameters.pharmacyId was null or undefined when calling careManagerServiceUpdatePharmacy.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdatePharmacy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/pharmacies/{pharmacy_id}`.replace(`{${"pharmacy_id"}}`, encodeURIComponent(String(requestParameters.pharmacyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdatePharmacyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePharmacyResponseFromJSON(jsonValue));
    }

    /**
     * UpdatePharmacy an existing Pharmacy.
     */
    async careManagerServiceUpdatePharmacy(requestParameters: CareManagerServiceUpdatePharmacyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePharmacyResponse> {
        const response = await this.careManagerServiceUpdatePharmacyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateServiceRequest updates a ServiceRequest by id.
     */
    async careManagerServiceUpdateServiceRequestRaw(requestParameters: CareManagerServiceUpdateServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateServiceRequestResponse>> {
        if (requestParameters.serviceRequestId === null || requestParameters.serviceRequestId === undefined) {
            throw new runtime.RequiredError('serviceRequestId','Required parameter requestParameters.serviceRequestId was null or undefined when calling careManagerServiceUpdateServiceRequest.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateServiceRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/service-requests/{service_request_id}`.replace(`{${"service_request_id"}}`, encodeURIComponent(String(requestParameters.serviceRequestId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateServiceRequestRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateServiceRequestResponseFromJSON(jsonValue));
    }

    /**
     * UpdateServiceRequest updates a ServiceRequest by id.
     */
    async careManagerServiceUpdateServiceRequest(requestParameters: CareManagerServiceUpdateServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateServiceRequestResponse> {
        const response = await this.careManagerServiceUpdateServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateTask updates an existing Task.
     */
    async careManagerServiceUpdateTaskRaw(requestParameters: CareManagerServiceUpdateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateTaskResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling careManagerServiceUpdateTask.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateTaskRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateTaskResponseFromJSON(jsonValue));
    }

    /**
     * UpdateTask updates an existing Task.
     */
    async careManagerServiceUpdateTask(requestParameters: CareManagerServiceUpdateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateTaskResponse> {
        const response = await this.careManagerServiceUpdateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateTaskTemplate updates an existing TaskTemplate.
     */
    async careManagerServiceUpdateTaskTemplateRaw(requestParameters: CareManagerServiceUpdateTaskTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateTaskTemplateResponse>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling careManagerServiceUpdateTaskTemplate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateTaskTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/task_templates/{template_id}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateTaskTemplateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateTaskTemplateResponseFromJSON(jsonValue));
    }

    /**
     * UpdateTaskTemplate updates an existing TaskTemplate.
     */
    async careManagerServiceUpdateTaskTemplate(requestParameters: CareManagerServiceUpdateTaskTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateTaskTemplateResponse> {
        const response = await this.careManagerServiceUpdateTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateVisit updates an existing Visit.
     */
    async careManagerServiceUpdateVisitRaw(requestParameters: CareManagerServiceUpdateVisitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateVisitResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateVisit.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateVisit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateVisitRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVisitResponseFromJSON(jsonValue));
    }

    /**
     * UpdateVisit updates an existing Visit.
     */
    async careManagerServiceUpdateVisit(requestParameters: CareManagerServiceUpdateVisitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateVisitResponse> {
        const response = await this.careManagerServiceUpdateVisitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateVisitEpisode updates the Episode instance the Visit belongs to.
     */
    async careManagerServiceUpdateVisitEpisodeRaw(requestParameters: CareManagerServiceUpdateVisitEpisodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateVisitEpisodeResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateVisitEpisode.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateVisitEpisode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/episode`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateVisitEpisodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVisitEpisodeResponseFromJSON(jsonValue));
    }

    /**
     * UpdateVisitEpisode updates the Episode instance the Visit belongs to.
     */
    async careManagerServiceUpdateVisitEpisode(requestParameters: CareManagerServiceUpdateVisitEpisodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateVisitEpisodeResponse> {
        const response = await this.careManagerServiceUpdateVisitEpisodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateVisitNote updates a Note for the specified Visit by ID.
     */
    async careManagerServiceUpdateVisitNoteRaw(requestParameters: CareManagerServiceUpdateVisitNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateVisitNoteResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateVisitNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling careManagerServiceUpdateVisitNote.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateVisitNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/notes/{note_id}`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))).replace(`{${"note_id"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateVisitNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVisitNoteResponseFromJSON(jsonValue));
    }

    /**
     * UpdateVisitNote updates a Note for the specified Visit by ID.
     */
    async careManagerServiceUpdateVisitNote(requestParameters: CareManagerServiceUpdateVisitNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateVisitNoteResponse> {
        const response = await this.careManagerServiceUpdateVisitNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateVisitStatus updates the status of an existing Visit.
     */
    async careManagerServiceUpdateVisitStatusRaw(requestParameters: CareManagerServiceUpdateVisitStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateVisitStatusResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateVisitStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateVisitStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/status`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateVisitStatusRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVisitStatusResponseFromJSON(jsonValue));
    }

    /**
     * UpdateVisitStatus updates the status of an existing Visit.
     */
    async careManagerServiceUpdateVisitStatus(requestParameters: CareManagerServiceUpdateVisitStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateVisitStatusResponse> {
        const response = await this.careManagerServiceUpdateVisitStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UpdateVisitSummary updates an existing VisitSummary.
     */
    async careManagerServiceUpdateVisitSummaryRaw(requestParameters: CareManagerServiceUpdateVisitSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateVisitSummaryResponse>> {
        if (requestParameters.visitId === null || requestParameters.visitId === undefined) {
            throw new runtime.RequiredError('visitId','Required parameter requestParameters.visitId was null or undefined when calling careManagerServiceUpdateVisitSummary.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling careManagerServiceUpdateVisitSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/visits/{visit_id}/summary`.replace(`{${"visit_id"}}`, encodeURIComponent(String(requestParameters.visitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CareManagerServiceUpdateVisitSummaryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVisitSummaryResponseFromJSON(jsonValue));
    }

    /**
     * UpdateVisitSummary updates an existing VisitSummary.
     */
    async careManagerServiceUpdateVisitSummary(requestParameters: CareManagerServiceUpdateVisitSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateVisitSummaryResponse> {
        const response = await this.careManagerServiceUpdateVisitSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
