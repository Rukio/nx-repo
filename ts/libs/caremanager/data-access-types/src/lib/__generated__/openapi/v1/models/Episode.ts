/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CarePhase } from './CarePhase';
import {
    CarePhaseFromJSON,
    CarePhaseFromJSONTyped,
    CarePhaseToJSON,
} from './CarePhase';
import type { IncompleteTasks } from './IncompleteTasks';
import {
    IncompleteTasksFromJSON,
    IncompleteTasksFromJSONTyped,
    IncompleteTasksToJSON,
} from './IncompleteTasks';
import type { Market } from './Market';
import {
    MarketFromJSON,
    MarketFromJSONTyped,
    MarketToJSON,
} from './Market';
import type { Note } from './Note';
import {
    NoteFromJSON,
    NoteFromJSONTyped,
    NoteToJSON,
} from './Note';
import type { Patient } from './Patient';
import {
    PatientFromJSON,
    PatientFromJSONTyped,
    PatientToJSON,
} from './Patient';
import type { ServiceLine } from './ServiceLine';
import {
    ServiceLineFromJSON,
    ServiceLineFromJSONTyped,
    ServiceLineToJSON,
} from './ServiceLine';
import type { Task } from './Task';
import {
    TaskFromJSON,
    TaskFromJSONTyped,
    TaskToJSON,
} from './Task';
import type { TaskTemplate } from './TaskTemplate';
import {
    TaskTemplateFromJSON,
    TaskTemplateFromJSONTyped,
    TaskTemplateToJSON,
} from './TaskTemplate';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Episode
 */
export interface Episode {
    /**
     * id represents the unique identifier of the Episode.
     * @type {string}
     * @memberof Episode
     */
    id: string;
    /**
     * admitted_at represents the date and time when Episode was admitted.
     * @type {string}
     * @memberof Episode
     */
    admittedAt: string;
    /**
     * patient_summary represents the patient's summary of the Episode.
     * @type {string}
     * @memberof Episode
     */
    patientSummary: string;
    /**
     * 
     * @type {ServiceLine}
     * @memberof Episode
     */
    serviceLine?: ServiceLine;
    /**
     * 
     * @type {CarePhase}
     * @memberof Episode
     */
    carePhase?: CarePhase;
    /**
     * 
     * @type {Patient}
     * @memberof Episode
     */
    patient?: Patient;
    /**
     * 
     * @type {User}
     * @memberof Episode
     */
    user?: User;
    /**
     * 
     * @type {Market}
     * @memberof Episode
     */
    market?: Market;
    /**
     * market_tz_name represents the timezone name of the Market the
     * Episode belongs to.
     * @type {string}
     * @memberof Episode
     */
    marketTzName?: string;
    /**
     * care_day represents the care day of the Episode.
     * @type {string}
     * @memberof Episode
     */
    careDay?: string;
    /**
     * discharged_at represents the date and time when the Episode was
     * discharged.
     * @type {string}
     * @memberof Episode
     */
    dischargedAt?: string;
    /**
     * source represents the source of the Episode.
     * @type {string}
     * @memberof Episode
     */
    source?: string;
    /**
     * primary_diagnosis represents the primary diagnosis of the Episode.
     * @type {string}
     * @memberof Episode
     */
    primaryDiagnosis?: string;
    /**
     * payer represents the payer of the Episode.
     * @type {string}
     * @memberof Episode
     */
    payer?: string;
    /**
     * doctors_primary_care represents the doctor's primary care of the Episode.
     * @type {string}
     * @memberof Episode
     */
    doctorsPrimaryCare?: string;
    /**
     * 
     * @type {IncompleteTasks}
     * @memberof Episode
     */
    incompleteTasks?: IncompleteTasks;
    /**
     * 
     * @type {Note}
     * @memberof Episode
     */
    lastNote?: Note;
    /**
     * created_at represents the date and time when the Episode was created.
     * @type {string}
     * @memberof Episode
     */
    createdAt?: string;
    /**
     * updated_at represents the date and time when the Episode was updated.
     * @type {string}
     * @memberof Episode
     */
    updatedAt?: string;
    /**
     * notes represents a list of Note instances that belong to
     * the Episode.
     * @type {Array<Note>}
     * @memberof Episode
     */
    notes?: Array<Note>;
    /**
     * tasks represents a list of Task instances that belong to
     * the Episode.
     * @type {Array<Task>}
     * @memberof Episode
     */
    tasks?: Array<Task>;
    /**
     * task_templates represents a list of TaskTemplates that
     * belong to the Episode.
     * @type {Array<TaskTemplate>}
     * @memberof Episode
     */
    taskTemplates?: Array<TaskTemplate>;
    /**
     * service_line_id represents the unique identifier of the ServiceLine
     * the Episode belongs to.
     * @type {string}
     * @memberof Episode
     */
    serviceLineId: string;
    /**
     * care_phase_id represents the unique identifier of the CarePhase the
     * Episode belongs to.
     * @type {string}
     * @memberof Episode
     */
    carePhaseId: string;
    /**
     * 
     * @type {Note}
     * @memberof Episode
     */
    mostRelevantNote?: Note;
    /**
     * patient_id represents the id of the Patient associated to the retrieved
     * Episode.
     * @type {string}
     * @memberof Episode
     */
    patientId: string;
    /**
     * is_waiver represents if the Episode is marked as Waiver.
     * @type {boolean}
     * @memberof Episode
     */
    isWaiver: boolean;
    /**
     * market_id represents the id of the Market associated to the retrieved
     * Episode.
     * @type {string}
     * @memberof Episode
     */
    marketId: string;
}

/**
 * Check if a given object implements the Episode interface.
 */
export function instanceOfEpisode(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "admittedAt" in value;
    isInstance = isInstance && "patientSummary" in value;
    isInstance = isInstance && "serviceLineId" in value;
    isInstance = isInstance && "carePhaseId" in value;
    isInstance = isInstance && "patientId" in value;
    isInstance = isInstance && "isWaiver" in value;
    isInstance = isInstance && "marketId" in value;

    return isInstance;
}

export function EpisodeFromJSON(json: any): Episode {
    return EpisodeFromJSONTyped(json, false);
}

export function EpisodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Episode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'admittedAt': json['admitted_at'],
        'patientSummary': json['patient_summary'],
        'serviceLine': !exists(json, 'service_line') ? undefined : ServiceLineFromJSON(json['service_line']),
        'carePhase': !exists(json, 'care_phase') ? undefined : CarePhaseFromJSON(json['care_phase']),
        'patient': !exists(json, 'patient') ? undefined : PatientFromJSON(json['patient']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
        'market': !exists(json, 'market') ? undefined : MarketFromJSON(json['market']),
        'marketTzName': !exists(json, 'market_tz_name') ? undefined : json['market_tz_name'],
        'careDay': !exists(json, 'care_day') ? undefined : json['care_day'],
        'dischargedAt': !exists(json, 'discharged_at') ? undefined : json['discharged_at'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'primaryDiagnosis': !exists(json, 'primary_diagnosis') ? undefined : json['primary_diagnosis'],
        'payer': !exists(json, 'payer') ? undefined : json['payer'],
        'doctorsPrimaryCare': !exists(json, 'doctors_primary_care') ? undefined : json['doctors_primary_care'],
        'incompleteTasks': !exists(json, 'incomplete_tasks') ? undefined : IncompleteTasksFromJSON(json['incomplete_tasks']),
        'lastNote': !exists(json, 'last_note') ? undefined : NoteFromJSON(json['last_note']),
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'notes': !exists(json, 'notes') ? undefined : ((json['notes'] as Array<any>).map(NoteFromJSON)),
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(TaskFromJSON)),
        'taskTemplates': !exists(json, 'task_templates') ? undefined : ((json['task_templates'] as Array<any>).map(TaskTemplateFromJSON)),
        'serviceLineId': json['service_line_id'],
        'carePhaseId': json['care_phase_id'],
        'mostRelevantNote': !exists(json, 'most_relevant_note') ? undefined : NoteFromJSON(json['most_relevant_note']),
        'patientId': json['patient_id'],
        'isWaiver': json['is_waiver'],
        'marketId': json['market_id'],
    };
}

export function EpisodeToJSON(value?: Episode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'admitted_at': value.admittedAt,
        'patient_summary': value.patientSummary,
        'service_line': ServiceLineToJSON(value.serviceLine),
        'care_phase': CarePhaseToJSON(value.carePhase),
        'patient': PatientToJSON(value.patient),
        'user': UserToJSON(value.user),
        'market': MarketToJSON(value.market),
        'market_tz_name': value.marketTzName,
        'care_day': value.careDay,
        'discharged_at': value.dischargedAt,
        'source': value.source,
        'primary_diagnosis': value.primaryDiagnosis,
        'payer': value.payer,
        'doctors_primary_care': value.doctorsPrimaryCare,
        'incomplete_tasks': IncompleteTasksToJSON(value.incompleteTasks),
        'last_note': NoteToJSON(value.lastNote),
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'notes': value.notes === undefined ? undefined : ((value.notes as Array<any>).map(NoteToJSON)),
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(TaskToJSON)),
        'task_templates': value.taskTemplates === undefined ? undefined : ((value.taskTemplates as Array<any>).map(TaskTemplateToJSON)),
        'service_line_id': value.serviceLineId,
        'care_phase_id': value.carePhaseId,
        'most_relevant_note': NoteToJSON(value.mostRelevantNote),
        'patient_id': value.patientId,
        'is_waiver': value.isWaiver,
        'market_id': value.marketId,
    };
}

