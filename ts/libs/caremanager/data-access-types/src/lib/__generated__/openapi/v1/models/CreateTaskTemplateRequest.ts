/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateTemplateTask } from './CreateTemplateTask';
import {
    CreateTemplateTaskFromJSON,
    CreateTemplateTaskFromJSONTyped,
    CreateTemplateTaskToJSON,
} from './CreateTemplateTask';

/**
 * 
 * @export
 * @interface CreateTaskTemplateRequest
 */
export interface CreateTaskTemplateRequest {
    /**
     * name of the task template
     * @type {string}
     * @memberof CreateTaskTemplateRequest
     */
    name: string;
    /**
     * summary is a text that describes the intended usage of the task template
     * @type {string}
     * @memberof CreateTaskTemplateRequest
     */
    summary: string;
    /**
     * service_line_id represents the ServiceLine ID the Template belongs to.
     * @type {string}
     * @memberof CreateTaskTemplateRequest
     */
    serviceLineId: string;
    /**
     * Optional. care_phase_id represents the CarePhase ID the Template belongs
     * to.
     * @type {string}
     * @memberof CreateTaskTemplateRequest
     */
    carePhaseId?: string;
    /**
     * tasks is an array that contains the tasks to be added in the template.
     * @type {Array<CreateTemplateTask>}
     * @memberof CreateTaskTemplateRequest
     */
    tasks?: Array<CreateTemplateTask>;
}

/**
 * Check if a given object implements the CreateTaskTemplateRequest interface.
 */
export function instanceOfCreateTaskTemplateRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "summary" in value;
    isInstance = isInstance && "serviceLineId" in value;

    return isInstance;
}

export function CreateTaskTemplateRequestFromJSON(json: any): CreateTaskTemplateRequest {
    return CreateTaskTemplateRequestFromJSONTyped(json, false);
}

export function CreateTaskTemplateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTaskTemplateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'summary': json['summary'],
        'serviceLineId': json['service_line_id'],
        'carePhaseId': !exists(json, 'care_phase_id') ? undefined : json['care_phase_id'],
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(CreateTemplateTaskFromJSON)),
    };
}

export function CreateTaskTemplateRequestToJSON(value?: CreateTaskTemplateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'summary': value.summary,
        'service_line_id': value.serviceLineId,
        'care_phase_id': value.carePhaseId,
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(CreateTemplateTaskToJSON)),
    };
}

