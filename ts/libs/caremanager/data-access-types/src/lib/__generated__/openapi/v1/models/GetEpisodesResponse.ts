/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Episode } from './Episode';
import {
    EpisodeFromJSON,
    EpisodeFromJSONTyped,
    EpisodeToJSON,
} from './Episode';
import type { PageInfo } from './PageInfo';
import {
    PageInfoFromJSON,
    PageInfoFromJSONTyped,
    PageInfoToJSON,
} from './PageInfo';

/**
 * 
 * @export
 * @interface GetEpisodesResponse
 */
export interface GetEpisodesResponse {
    /**
     * episodes represents the collection of Episodes corresponding to the page
     * and filters requested.
     * @type {Array<Episode>}
     * @memberof GetEpisodesResponse
     */
    episodes: Array<Episode>;
    /**
     * 
     * @type {PageInfo}
     * @memberof GetEpisodesResponse
     */
    meta?: PageInfo;
}

/**
 * Check if a given object implements the GetEpisodesResponse interface.
 */
export function instanceOfGetEpisodesResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "episodes" in value;

    return isInstance;
}

export function GetEpisodesResponseFromJSON(json: any): GetEpisodesResponse {
    return GetEpisodesResponseFromJSONTyped(json, false);
}

export function GetEpisodesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetEpisodesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'episodes': ((json['episodes'] as Array<any>).map(EpisodeFromJSON)),
        'meta': !exists(json, 'meta') ? undefined : PageInfoFromJSON(json['meta']),
    };
}

export function GetEpisodesResponseToJSON(value?: GetEpisodesResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'episodes': ((value.episodes as Array<any>).map(EpisodeToJSON)),
        'meta': PageInfoToJSON(value.meta),
    };
}

