/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VisitStatusGroup } from './VisitStatusGroup';
import {
    VisitStatusGroupFromJSON,
    VisitStatusGroupFromJSONTyped,
    VisitStatusGroupToJSON,
} from './VisitStatusGroup';
import type { VisitSummary } from './VisitSummary';
import {
    VisitSummaryFromJSON,
    VisitSummaryFromJSONTyped,
    VisitSummaryToJSON,
} from './VisitSummary';

/**
 * 
 * @export
 * @interface Visit
 */
export interface Visit {
    /**
     * id represents the unique identifier of the Visit.
     * @type {string}
     * @memberof Visit
     */
    id: string;
    /**
     * episode_id represents the unique identifier of the Episode the Visit
     * belongs to.
     * @type {string}
     * @memberof Visit
     */
    episodeId: string;
    /**
     * 
     * @type {VisitStatusGroup}
     * @memberof Visit
     */
    statusGroup?: VisitStatusGroup;
    /**
     * created_at represents the date and time when the Visit was created.
     * @type {string}
     * @memberof Visit
     */
    createdAt: string;
    /**
     * updated_at represents the date and time when the Visit was last updated.
     * @type {string}
     * @memberof Visit
     */
    updatedAt: string;
    /**
     * status represents the status of the Visit.
     * @type {string}
     * @memberof Visit
     */
    status?: string;
    /**
     * car_name represents the name of the car that was assigned to the Care
     * Request associated to the Visit.
     * @type {string}
     * @memberof Visit
     */
    carName?: string;
    /**
     * provider_user_ids represents an array of provider (User) ids that were
     * assigned to the Care Request associated to the Visit.
     * @type {Array<string>}
     * @memberof Visit
     */
    providerUserIds?: Array<string>;
    /**
     * created_by_user_id represents the ID of the User that created the Visit.
     * @type {string}
     * @memberof Visit
     */
    createdByUserId?: string;
    /**
     * updated_by_user_id represents the ID of the User that last updated the
     * Visit.
     * @type {string}
     * @memberof Visit
     */
    updatedByUserId?: string;
    /**
     * address_id represents the unique identifier of the Address the Visit
     * belongs to.
     * @type {string}
     * @memberof Visit
     */
    addressId?: string;
    /**
     * patient_availability_start represents the preferred Visit start time for
     * the Patient.
     * @type {string}
     * @memberof Visit
     */
    patientAvailabilityStart?: string;
    /**
     * patient_availability_end represents the preferred Visit end time for the
     * Patient.
     * @type {string}
     * @memberof Visit
     */
    patientAvailabilityEnd?: string;
    /**
     * 
     * @type {VisitSummary}
     * @memberof Visit
     */
    summary?: VisitSummary;
    /**
     * type_id represents the id of the VisitType that the Visit belongs to.
     * @type {string}
     * @memberof Visit
     */
    typeId?: string;
    /**
     * care_request_id represents the id of the Care Request that the Visit
     * originated from.
     * @type {string}
     * @memberof Visit
     */
    careRequestId?: string;
    /**
     * virtual_app_id represents the ID of the User that is assigned to the Visit
     * as Virtual APP.
     * @type {string}
     * @memberof Visit
     */
    virtualAppId?: string;
    /**
     * car_id represents the ID of the car that was assigned to the Visit.
     * @type {string}
     * @memberof Visit
     */
    carId?: string;
}

/**
 * Check if a given object implements the Visit interface.
 */
export function instanceOfVisit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "episodeId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function VisitFromJSON(json: any): Visit {
    return VisitFromJSONTyped(json, false);
}

export function VisitFromJSONTyped(json: any, ignoreDiscriminator: boolean): Visit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'episodeId': json['episode_id'],
        'statusGroup': !exists(json, 'status_group') ? undefined : VisitStatusGroupFromJSON(json['status_group']),
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'carName': !exists(json, 'car_name') ? undefined : json['car_name'],
        'providerUserIds': !exists(json, 'provider_user_ids') ? undefined : json['provider_user_ids'],
        'createdByUserId': !exists(json, 'created_by_user_id') ? undefined : json['created_by_user_id'],
        'updatedByUserId': !exists(json, 'updated_by_user_id') ? undefined : json['updated_by_user_id'],
        'addressId': !exists(json, 'address_id') ? undefined : json['address_id'],
        'patientAvailabilityStart': !exists(json, 'patient_availability_start') ? undefined : json['patient_availability_start'],
        'patientAvailabilityEnd': !exists(json, 'patient_availability_end') ? undefined : json['patient_availability_end'],
        'summary': !exists(json, 'summary') ? undefined : VisitSummaryFromJSON(json['summary']),
        'typeId': !exists(json, 'type_id') ? undefined : json['type_id'],
        'careRequestId': !exists(json, 'care_request_id') ? undefined : json['care_request_id'],
        'virtualAppId': !exists(json, 'virtual_app_id') ? undefined : json['virtual_app_id'],
        'carId': !exists(json, 'car_id') ? undefined : json['car_id'],
    };
}

export function VisitToJSON(value?: Visit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'episode_id': value.episodeId,
        'status_group': VisitStatusGroupToJSON(value.statusGroup),
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'status': value.status,
        'car_name': value.carName,
        'provider_user_ids': value.providerUserIds,
        'created_by_user_id': value.createdByUserId,
        'updated_by_user_id': value.updatedByUserId,
        'address_id': value.addressId,
        'patient_availability_start': value.patientAvailabilityStart,
        'patient_availability_end': value.patientAvailabilityEnd,
        'summary': VisitSummaryToJSON(value.summary),
        'type_id': value.typeId,
        'care_request_id': value.careRequestId,
        'virtual_app_id': value.virtualAppId,
        'car_id': value.carId,
    };
}

