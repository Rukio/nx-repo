/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * id represents the unique identifier of the Note.
     * @type {string}
     * @memberof Note
     */
    id: string;
    /**
     * details represents the description or the content of the Note.
     * @type {string}
     * @memberof Note
     */
    details: string;
    /**
     * note_kind represents the type of the note, whether it is a general note, a
     * daily update, etc.
     * @type {string}
     * @memberof Note
     */
    noteKind: string;
    /**
     * noteable_id represents the ID of the Episode this Note belongs to.
     * @type {string}
     * @memberof Note
     */
    noteableId: string;
    /**
     * pinned represents the pinned state of the Note, whether it is pinned or
     * not.
     * @type {boolean}
     * @memberof Note
     */
    pinned?: boolean;
    /**
     * 
     * @type {User}
     * @memberof Note
     */
    createdBy?: User;
    /**
     * 
     * @type {User}
     * @memberof Note
     */
    lastUpdatedBy?: User;
    /**
     * 
     * @type {User}
     * @memberof Note
     */
    pinnedBy?: User;
    /**
     * pinned_at represents the date and time when the Task was last pinned.
     * @type {string}
     * @memberof Note
     */
    pinnedAt?: string;
    /**
     * created_at represents the date and time when the Note was created.
     * @type {string}
     * @memberof Note
     */
    createdAt?: string;
    /**
     * updated_at represents the date and time when the Note was last updated.
     * @type {string}
     * @memberof Note
     */
    updatedAt?: string;
    /**
     * episode_id represents the ID of the Episode this Note belongs to.
     * @type {string}
     * @memberof Note
     */
    episodeId: string;
    /**
     * created_by_user_id represents the ID of the User that first created the
     * Note.
     * @type {string}
     * @memberof Note
     */
    createdByUserId?: string;
    /**
     * updated_by_user_id represents the ID of the User that last updated the
     * Note.
     * @type {string}
     * @memberof Note
     */
    updatedByUserId?: string;
}

/**
 * Check if a given object implements the Note interface.
 */
export function instanceOfNote(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "details" in value;
    isInstance = isInstance && "noteKind" in value;
    isInstance = isInstance && "noteableId" in value;
    isInstance = isInstance && "episodeId" in value;

    return isInstance;
}

export function NoteFromJSON(json: any): Note {
    return NoteFromJSONTyped(json, false);
}

export function NoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Note {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'details': json['details'],
        'noteKind': json['note_kind'],
        'noteableId': json['noteable_id'],
        'pinned': !exists(json, 'pinned') ? undefined : json['pinned'],
        'createdBy': !exists(json, 'created_by') ? undefined : UserFromJSON(json['created_by']),
        'lastUpdatedBy': !exists(json, 'last_updated_by') ? undefined : UserFromJSON(json['last_updated_by']),
        'pinnedBy': !exists(json, 'pinned_by') ? undefined : UserFromJSON(json['pinned_by']),
        'pinnedAt': !exists(json, 'pinned_at') ? undefined : json['pinned_at'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'episodeId': json['episode_id'],
        'createdByUserId': !exists(json, 'created_by_user_id') ? undefined : json['created_by_user_id'],
        'updatedByUserId': !exists(json, 'updated_by_user_id') ? undefined : json['updated_by_user_id'],
    };
}

export function NoteToJSON(value?: Note | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'details': value.details,
        'note_kind': value.noteKind,
        'noteable_id': value.noteableId,
        'pinned': value.pinned,
        'created_by': UserToJSON(value.createdBy),
        'last_updated_by': UserToJSON(value.lastUpdatedBy),
        'pinned_by': UserToJSON(value.pinnedBy),
        'pinned_at': value.pinnedAt,
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'episode_id': value.episodeId,
        'created_by_user_id': value.createdByUserId,
        'updated_by_user_id': value.updatedByUserId,
    };
}

