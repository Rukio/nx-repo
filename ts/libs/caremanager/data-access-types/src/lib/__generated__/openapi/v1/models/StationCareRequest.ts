/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StationCareRequest
 */
export interface StationCareRequest {
    /**
     * id is the unique numeric identifier for a StationCareRequest.
     * @type {string}
     * @memberof StationCareRequest
     */
    id: string;
    /**
     * chief_complaint is a string describing the chief complaint of the
     * StationCareRequest.
     * @type {string}
     * @memberof StationCareRequest
     */
    chiefComplaint: string;
    /**
     * car_name is the string that represents the car assigned to the
     * StationCareRequest.
     * @type {string}
     * @memberof StationCareRequest
     */
    carName?: string;
    /**
     * provider_user_ids represents an array of provider ids that were
     * assigned to the StationCareRequest.
     * @type {Array<string>}
     * @memberof StationCareRequest
     */
    providerUserIds?: Array<string>;
    /**
     * risk_strat_score represents the risk stratification score of the
     * StationCareRequest.
     * @type {number}
     * @memberof StationCareRequest
     */
    riskStratScore?: number;
    /**
     * secondary_screening_provider_id represents the id of the provider assigned
     * to the secondary screening.
     * @type {string}
     * @memberof StationCareRequest
     */
    secondaryScreeningProviderId?: string;
    /**
     * secondary_screening_note represents a note for the secondary screening.
     * @type {string}
     * @memberof StationCareRequest
     */
    secondaryScreeningNote?: string;
    /**
     * requester_type represents the relationship that the requester has with the
     * StationPatient.
     * @type {string}
     * @memberof StationCareRequest
     */
    requesterType?: string;
    /**
     * requester_name is a string representing the name of the requester.
     * @type {string}
     * @memberof StationCareRequest
     */
    requesterName?: string;
    /**
     * requester_organization_name represents the name of the requester's
     * organization.
     * @type {string}
     * @memberof StationCareRequest
     */
    requesterOrganizationName?: string;
    /**
     * requester_phone_number represents the phone number of the requester.
     * @type {string}
     * @memberof StationCareRequest
     */
    requesterPhoneNumber?: string;
}

/**
 * Check if a given object implements the StationCareRequest interface.
 */
export function instanceOfStationCareRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "chiefComplaint" in value;

    return isInstance;
}

export function StationCareRequestFromJSON(json: any): StationCareRequest {
    return StationCareRequestFromJSONTyped(json, false);
}

export function StationCareRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StationCareRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'chiefComplaint': json['chief_complaint'],
        'carName': !exists(json, 'car_name') ? undefined : json['car_name'],
        'providerUserIds': !exists(json, 'provider_user_ids') ? undefined : json['provider_user_ids'],
        'riskStratScore': !exists(json, 'risk_strat_score') ? undefined : json['risk_strat_score'],
        'secondaryScreeningProviderId': !exists(json, 'secondary_screening_provider_id') ? undefined : json['secondary_screening_provider_id'],
        'secondaryScreeningNote': !exists(json, 'secondary_screening_note') ? undefined : json['secondary_screening_note'],
        'requesterType': !exists(json, 'requester_type') ? undefined : json['requester_type'],
        'requesterName': !exists(json, 'requester_name') ? undefined : json['requester_name'],
        'requesterOrganizationName': !exists(json, 'requester_organization_name') ? undefined : json['requester_organization_name'],
        'requesterPhoneNumber': !exists(json, 'requester_phone_number') ? undefined : json['requester_phone_number'],
    };
}

export function StationCareRequestToJSON(value?: StationCareRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'chief_complaint': value.chiefComplaint,
        'car_name': value.carName,
        'provider_user_ids': value.providerUserIds,
        'risk_strat_score': value.riskStratScore,
        'secondary_screening_provider_id': value.secondaryScreeningProviderId,
        'secondary_screening_note': value.secondaryScreeningNote,
        'requester_type': value.requesterType,
        'requester_name': value.requesterName,
        'requester_organization_name': value.requesterOrganizationName,
        'requester_phone_number': value.requesterPhoneNumber,
    };
}

