/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateInsuranceFromStationCR } from './CreateInsuranceFromStationCR';
import {
    CreateInsuranceFromStationCRFromJSON,
    CreateInsuranceFromStationCRFromJSONTyped,
    CreateInsuranceFromStationCRToJSON,
} from './CreateInsuranceFromStationCR';
import type { CreateMedicalDecisionMakerFromStationCR } from './CreateMedicalDecisionMakerFromStationCR';
import {
    CreateMedicalDecisionMakerFromStationCRFromJSON,
    CreateMedicalDecisionMakerFromStationCRFromJSONTyped,
    CreateMedicalDecisionMakerFromStationCRToJSON,
} from './CreateMedicalDecisionMakerFromStationCR';

/**
 * 
 * @export
 * @interface CreatePatientFromStationCRRequest
 */
export interface CreatePatientFromStationCRRequest {
    /**
     * Required. first_name represents the first name of the Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    firstName: string;
    /**
     * middle_name represents the middle name of the Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    middleName?: string;
    /**
     * Required. last_name represents the last name of the Patient
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    lastName: string;
    /**
     * Required. date_of_birth represents the date of birth of the Patient
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    dateOfBirth: string;
    /**
     * Required. sex represents the sex of the Patient, male, female, other or
     * unspecified.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    sex: string;
    /**
     * phone_number represents the phone number of the Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    phoneNumber: string;
    /**
     * athena_medical_record_number represents the unique identifier of the
     * Patient on the Athena db.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    athenaMedicalRecordNumber: string;
    /**
     * 
     * @type {CreateMedicalDecisionMakerFromStationCR}
     * @memberof CreatePatientFromStationCRRequest
     */
    medicalDecisionMaker?: CreateMedicalDecisionMakerFromStationCR;
    /**
     * insurance represents the insurance object for the patient
     * @type {Array<CreateInsuranceFromStationCR>}
     * @memberof CreatePatientFromStationCRRequest
     */
    insurances: Array<CreateInsuranceFromStationCR>;
    /**
     * address_street represents the main street details of the main address of
     * the Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    addressStreet?: string;
    /**
     * address_street_2 represents the extra street details of the main address of
     * the Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    addressStreet2?: string;
    /**
     * address_city represents the name of the city of the main address of the
     * Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    addressCity?: string;
    /**
     * address_state represents the name of the state of the main address of the
     * Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    addressState?: string;
    /**
     * address_zipcode represents the zipcode number of the main address of the
     * Patient.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    addressZipcode?: string;
    /**
     * address_id represents station's address id for the patient. This is
     * typically tied to the last care request in station.
     * @type {string}
     * @memberof CreatePatientFromStationCRRequest
     */
    addressId?: string;
}

/**
 * Check if a given object implements the CreatePatientFromStationCRRequest interface.
 */
export function instanceOfCreatePatientFromStationCRRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "dateOfBirth" in value;
    isInstance = isInstance && "sex" in value;
    isInstance = isInstance && "phoneNumber" in value;
    isInstance = isInstance && "athenaMedicalRecordNumber" in value;
    isInstance = isInstance && "insurances" in value;

    return isInstance;
}

export function CreatePatientFromStationCRRequestFromJSON(json: any): CreatePatientFromStationCRRequest {
    return CreatePatientFromStationCRRequestFromJSONTyped(json, false);
}

export function CreatePatientFromStationCRRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePatientFromStationCRRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'firstName': json['first_name'],
        'middleName': !exists(json, 'middle_name') ? undefined : json['middle_name'],
        'lastName': json['last_name'],
        'dateOfBirth': json['date_of_birth'],
        'sex': json['sex'],
        'phoneNumber': json['phone_number'],
        'athenaMedicalRecordNumber': json['athena_medical_record_number'],
        'medicalDecisionMaker': !exists(json, 'medical_decision_maker') ? undefined : CreateMedicalDecisionMakerFromStationCRFromJSON(json['medical_decision_maker']),
        'insurances': ((json['insurances'] as Array<any>).map(CreateInsuranceFromStationCRFromJSON)),
        'addressStreet': !exists(json, 'address_street') ? undefined : json['address_street'],
        'addressStreet2': !exists(json, 'address_street_2') ? undefined : json['address_street_2'],
        'addressCity': !exists(json, 'address_city') ? undefined : json['address_city'],
        'addressState': !exists(json, 'address_state') ? undefined : json['address_state'],
        'addressZipcode': !exists(json, 'address_zipcode') ? undefined : json['address_zipcode'],
        'addressId': !exists(json, 'address_id') ? undefined : json['address_id'],
    };
}

export function CreatePatientFromStationCRRequestToJSON(value?: CreatePatientFromStationCRRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'first_name': value.firstName,
        'middle_name': value.middleName,
        'last_name': value.lastName,
        'date_of_birth': value.dateOfBirth,
        'sex': value.sex,
        'phone_number': value.phoneNumber,
        'athena_medical_record_number': value.athenaMedicalRecordNumber,
        'medical_decision_maker': CreateMedicalDecisionMakerFromStationCRToJSON(value.medicalDecisionMaker),
        'insurances': ((value.insurances as Array<any>).map(CreateInsuranceFromStationCRToJSON)),
        'address_street': value.addressStreet,
        'address_street_2': value.addressStreet2,
        'address_city': value.addressCity,
        'address_state': value.addressState,
        'address_zipcode': value.addressZipcode,
        'address_id': value.addressId,
    };
}

