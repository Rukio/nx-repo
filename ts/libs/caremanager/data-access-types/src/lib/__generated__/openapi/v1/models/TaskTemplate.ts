/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CarePhase } from './CarePhase';
import {
    CarePhaseFromJSON,
    CarePhaseFromJSONTyped,
    CarePhaseToJSON,
} from './CarePhase';
import type { ServiceLine } from './ServiceLine';
import {
    ServiceLineFromJSON,
    ServiceLineFromJSONTyped,
    ServiceLineToJSON,
} from './ServiceLine';
import type { TaskTemplateTask } from './TaskTemplateTask';
import {
    TaskTemplateTaskFromJSON,
    TaskTemplateTaskFromJSONTyped,
    TaskTemplateTaskToJSON,
} from './TaskTemplateTask';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface TaskTemplate
 */
export interface TaskTemplate {
    /**
     * id represents the unique identifier of the TaskTemplate.
     * @type {string}
     * @memberof TaskTemplate
     */
    id: string;
    /**
     * created_at represents the date and time when the TaskTemplate was created.
     * @type {string}
     * @memberof TaskTemplate
     */
    createdAt: string;
    /**
     * updated_at represents the date and time when the TaskTemplate was last
     * updated.
     * @type {string}
     * @memberof TaskTemplate
     */
    updatedAt: string;
    /**
     * name represents the name of the TaskTemplate.
     * @type {string}
     * @memberof TaskTemplate
     */
    name: string;
    /**
     * tasks_count represents the number of
     * @type {string}
     * @memberof TaskTemplate
     */
    tasksCount: string;
    /**
     * 
     * @type {ServiceLine}
     * @memberof TaskTemplate
     */
    serviceLine?: ServiceLine;
    /**
     * 
     * @type {User}
     * @memberof TaskTemplate
     */
    lastUpdatedBy?: User;
    /**
     * summary represents the summary of the TaskTemplate.
     * @type {string}
     * @memberof TaskTemplate
     */
    summary?: string;
    /**
     * 
     * @type {CarePhase}
     * @memberof TaskTemplate
     */
    carePhase?: CarePhase;
    /**
     * tasks represents a collection of Tasks owned by the Task Template.
     * @type {Array<TaskTemplateTask>}
     * @memberof TaskTemplate
     */
    tasks?: Array<TaskTemplateTask>;
    /**
     * service_line_id represents the unique identifier of the ServiceLine
     * the TaskTemplate belongs to.
     * @type {string}
     * @memberof TaskTemplate
     */
    serviceLineId: string;
    /**
     * care_phase_id represents the unique identifier of the CarePhase the
     * TaskTemplate belongs to.
     * @type {string}
     * @memberof TaskTemplate
     */
    carePhaseId?: string;
    /**
     * updated_by_user_id represents the ID of the User that last updated the
     * TaskTemplate.
     * @type {string}
     * @memberof TaskTemplate
     */
    updatedByUserId: string;
}

/**
 * Check if a given object implements the TaskTemplate interface.
 */
export function instanceOfTaskTemplate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "tasksCount" in value;
    isInstance = isInstance && "serviceLineId" in value;
    isInstance = isInstance && "updatedByUserId" in value;

    return isInstance;
}

export function TaskTemplateFromJSON(json: any): TaskTemplate {
    return TaskTemplateFromJSONTyped(json, false);
}

export function TaskTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskTemplate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['created_at'],
        'updatedAt': json['updated_at'],
        'name': json['name'],
        'tasksCount': json['tasks_count'],
        'serviceLine': !exists(json, 'service_line') ? undefined : ServiceLineFromJSON(json['service_line']),
        'lastUpdatedBy': !exists(json, 'last_updated_by') ? undefined : UserFromJSON(json['last_updated_by']),
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'carePhase': !exists(json, 'care_phase') ? undefined : CarePhaseFromJSON(json['care_phase']),
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(TaskTemplateTaskFromJSON)),
        'serviceLineId': json['service_line_id'],
        'carePhaseId': !exists(json, 'care_phase_id') ? undefined : json['care_phase_id'],
        'updatedByUserId': json['updated_by_user_id'],
    };
}

export function TaskTemplateToJSON(value?: TaskTemplate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'name': value.name,
        'tasks_count': value.tasksCount,
        'service_line': ServiceLineToJSON(value.serviceLine),
        'last_updated_by': UserToJSON(value.lastUpdatedBy),
        'summary': value.summary,
        'care_phase': CarePhaseToJSON(value.carePhase),
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(TaskTemplateTaskToJSON)),
        'service_line_id': value.serviceLineId,
        'care_phase_id': value.carePhaseId,
        'updated_by_user_id': value.updatedByUserId,
    };
}

