/* tslint:disable */
/* eslint-disable */
/**
 * caremanager/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TaskType } from './TaskType';
import {
    TaskTypeFromJSON,
    TaskTypeFromJSONTyped,
    TaskTypeToJSON,
} from './TaskType';

/**
 * 
 * @export
 * @interface TaskTemplateTask
 */
export interface TaskTemplateTask {
    /**
     * id represents the unique identifier of the Task.
     * @type {string}
     * @memberof TaskTemplateTask
     */
    id: string;
    /**
     * task  represents the text description or content of the Task.
     * @type {string}
     * @memberof TaskTemplateTask
     */
    body: string;
    /**
     * 
     * @type {TaskType}
     * @memberof TaskTemplateTask
     */
    type?: TaskType;
}

/**
 * Check if a given object implements the TaskTemplateTask interface.
 */
export function instanceOfTaskTemplateTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "body" in value;

    return isInstance;
}

export function TaskTemplateTaskFromJSON(json: any): TaskTemplateTask {
    return TaskTemplateTaskFromJSONTyped(json, false);
}

export function TaskTemplateTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskTemplateTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'body': json['body'],
        'type': !exists(json, 'type') ? undefined : TaskTypeFromJSON(json['type']),
    };
}

export function TaskTemplateTaskToJSON(value?: TaskTemplateTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'body': value.body,
        'type': TaskTypeToJSON(value.type),
    };
}

